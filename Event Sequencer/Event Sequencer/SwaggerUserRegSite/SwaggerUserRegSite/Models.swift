// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static public func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }
    
    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [AddExternalLoginBindingModel]
        Decoders.addDecoder(clazz: [AddExternalLoginBindingModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AddExternalLoginBindingModel]> in
            return Decoders.decode(clazz: [AddExternalLoginBindingModel].self, source: source)
        }

        // Decoder for AddExternalLoginBindingModel
        Decoders.addDecoder(clazz: AddExternalLoginBindingModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AddExternalLoginBindingModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AddExternalLoginBindingModel() : instance as! AddExternalLoginBindingModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ExternalAccessToken"] as AnyObject?) {
                
                case let .success(value): _result.externalAccessToken = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AddExternalLoginBindingModel", actual: "\(source)"))
            }
        }
        // Decoder for [ChangePasswordBindingModel]
        Decoders.addDecoder(clazz: [ChangePasswordBindingModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ChangePasswordBindingModel]> in
            return Decoders.decode(clazz: [ChangePasswordBindingModel].self, source: source)
        }

        // Decoder for ChangePasswordBindingModel
        Decoders.addDecoder(clazz: ChangePasswordBindingModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ChangePasswordBindingModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ChangePasswordBindingModel() : instance as! ChangePasswordBindingModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OldPassword"] as AnyObject?) {
                
                case let .success(value): _result.oldPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NewPassword"] as AnyObject?) {
                
                case let .success(value): _result.newPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfirmPassword"] as AnyObject?) {
                
                case let .success(value): _result.confirmPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PasswordReminderPhrase"] as AnyObject?) {
                
                case let .success(value): _result.passwordReminderPhrase = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ChangePasswordBindingModel", actual: "\(source)"))
            }
        }
        // Decoder for [ExternalLoginViewModel]
        Decoders.addDecoder(clazz: [ExternalLoginViewModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ExternalLoginViewModel]> in
            return Decoders.decode(clazz: [ExternalLoginViewModel].self, source: source)
        }

        // Decoder for ExternalLoginViewModel
        Decoders.addDecoder(clazz: ExternalLoginViewModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ExternalLoginViewModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ExternalLoginViewModel() : instance as! ExternalLoginViewModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Url"] as AnyObject?) {
                
                case let .success(value): _result.url = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["State"] as AnyObject?) {
                
                case let .success(value): _result.state = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ExternalLoginViewModel", actual: "\(source)"))
            }
        }
        // Decoder for [ManageInfoViewModel]
        Decoders.addDecoder(clazz: [ManageInfoViewModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ManageInfoViewModel]> in
            return Decoders.decode(clazz: [ManageInfoViewModel].self, source: source)
        }

        // Decoder for ManageInfoViewModel
        Decoders.addDecoder(clazz: ManageInfoViewModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ManageInfoViewModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ManageInfoViewModel() : instance as! ManageInfoViewModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LocalLoginProvider"] as AnyObject?) {
                
                case let .success(value): _result.localLoginProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"] as AnyObject?) {
                
                case let .success(value): _result.email = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [UserLoginInfoViewModel].self, source: sourceDictionary["Logins"] as AnyObject?) {
                
                case let .success(value): _result.logins = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [ExternalLoginViewModel].self, source: sourceDictionary["ExternalLoginProviders"] as AnyObject?) {
                
                case let .success(value): _result.externalLoginProviders = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ManageInfoViewModel", actual: "\(source)"))
            }
        }
        // Decoder for [RegisterBindingModel]
        Decoders.addDecoder(clazz: [RegisterBindingModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[RegisterBindingModel]> in
            return Decoders.decode(clazz: [RegisterBindingModel].self, source: source)
        }

        // Decoder for RegisterBindingModel
        Decoders.addDecoder(clazz: RegisterBindingModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<RegisterBindingModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {

                let _result = instance == nil ? RegisterBindingModel() : instance as! RegisterBindingModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"] as AnyObject?) {
                
                case let .success(value): _result.email = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"] as AnyObject?) {
                
                case let .success(value): _result.firstName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MiddleName"] as AnyObject?) {
                
                case let .success(value): _result.middleName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastName"] as AnyObject?) {
                
                case let .success(value): _result.lastName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Password"] as AnyObject?) {
                
                case let .success(value): _result.password = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfirmPassword"] as AnyObject?) {
                
                case let .success(value): _result.confirmPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AllowMuzomaContact"] as AnyObject?) {
                
                case let .success(value): _result.allowMuzomaContact = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Artist"] as AnyObject?) {
                
                case let .success(value): _result.artist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Author"] as AnyObject?) {
                
                case let .success(value): _result.author = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Copyright"] as AnyObject?) {
                
                case let .success(value): _result.copyright = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Publisher"] as AnyObject?) {
                
                case let .success(value): _result.publisher = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AppKey"] as AnyObject?) {
                
                case let .success(value): _result.appKey = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AppleProducerPurchasedTXReceipt"] as AnyObject?) {
                
                case let .success(value): _result.appleProducerPurchasedTXReceipt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CommunityName"] as AnyObject?) {
                
                case let .success(value): _result.communityName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["EmailVerified"] as AnyObject?) {
                
                case let .success(value): _result.emailVerified = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CommentsToMuzoma"] as AnyObject?) {
                
                case let .success(value): _result.commentsToMuzoma = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PasswordReminderPhrase"] as AnyObject?) {
                
                case let .success(value): _result.passwordReminderPhrase = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RegistrationId"] as AnyObject?) {
                
                case let .success(value): _result.registrationId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DotComSiteUser"] as AnyObject?) {
                
                case let .success(value): _result.dotComSiteUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DotComSitePassword"] as AnyObject?) {
                
                case let .success(value): _result.dotComSitePassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAMusician"] as AnyObject?) {
                
                case let .success(value): _result.iAmAMusician = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAPerformer"] as AnyObject?) {
                
                case let .success(value): _result.iAmAPerformer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAComposer"] as AnyObject?) {
                
                case let .success(value): _result.iAmAComposer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmASoundEngineer"] as AnyObject?) {
                
                case let .success(value): _result.iAmASoundEngineer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAStreetArtist"] as AnyObject?) {
                
                case let .success(value): _result.iAmAStreetArtist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAProducer"] as AnyObject?) {
                
                case let .success(value): _result.iAmAProducer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAStudent"] as AnyObject?) {
                
                case let .success(value): _result.iAmAStudent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmATeacher"] as AnyObject?) {
                
                case let .success(value): _result.iAmATeacher = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmABandMember"] as AnyObject?) {
                
                case let .success(value): _result.iAmABandMember = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmASoloArtist"] as AnyObject?) {
                
                case let .success(value): _result.iAmASoloArtist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAPublisher"] as AnyObject?) {
                
                case let .success(value): _result.iAmAPublisher = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAWorshipArtist"] as AnyObject?) {
                
                case let .success(value): _result.iAmAWorshipArtist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmACoverArtist"] as AnyObject?) {
                
                case let .success(value): _result.iAmACoverArtist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmOriginalArtist"] as AnyObject?) {
                
                case let .success(value): _result.iAmOriginalArtist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAVocalist"] as AnyObject?) {
                
                case let .success(value): _result.iAmAVocalist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAGuitarPlayer"] as AnyObject?) {
                
                case let .success(value): _result.iAmAGuitarPlayer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmABassPlayer"] as AnyObject?) {
                
                case let .success(value): _result.iAmABassPlayer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmAKeyboardPlayer"] as AnyObject?) {
                
                case let .success(value): _result.iAmAKeyboardPlayer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IAmADrummer"] as AnyObject?) {
                
                case let .success(value): _result.iAmADrummer = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "RegisterBindingModel", actual: "\(source)"))
            }
        }
        // Decoder for [RegisterExternalBindingModel]
        Decoders.addDecoder(clazz: [RegisterExternalBindingModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[RegisterExternalBindingModel]> in
            return Decoders.decode(clazz: [RegisterExternalBindingModel].self, source: source)
        }

        // Decoder for RegisterExternalBindingModel
        Decoders.addDecoder(clazz: RegisterExternalBindingModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<RegisterExternalBindingModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? RegisterExternalBindingModel() : instance as! RegisterExternalBindingModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"] as AnyObject?) {
                
                case let .success(value): _result.email = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "RegisterExternalBindingModel", actual: "\(source)"))
            }
        }
        // Decoder for [RemoveLoginBindingModel]
        Decoders.addDecoder(clazz: [RemoveLoginBindingModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[RemoveLoginBindingModel]> in
            return Decoders.decode(clazz: [RemoveLoginBindingModel].self, source: source)
        }

        // Decoder for RemoveLoginBindingModel
        Decoders.addDecoder(clazz: RemoveLoginBindingModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<RemoveLoginBindingModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? RemoveLoginBindingModel() : instance as! RemoveLoginBindingModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LoginProvider"] as AnyObject?) {
                
                case let .success(value): _result.loginProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProviderKey"] as AnyObject?) {
                
                case let .success(value): _result.providerKey = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "RemoveLoginBindingModel", actual: "\(source)"))
            }
        }
        // Decoder for [SetPasswordBindingModel]
        Decoders.addDecoder(clazz: [SetPasswordBindingModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SetPasswordBindingModel]> in
            return Decoders.decode(clazz: [SetPasswordBindingModel].self, source: source)
        }

        // Decoder for SetPasswordBindingModel
        Decoders.addDecoder(clazz: SetPasswordBindingModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SetPasswordBindingModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SetPasswordBindingModel() : instance as! SetPasswordBindingModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NewPassword"] as AnyObject?) {
                
                case let .success(value): _result.newPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfirmPassword"] as AnyObject?) {
                
                case let .success(value): _result.confirmPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PasswordReminderPhrase"] as AnyObject?) {
                
                case let .success(value): _result.passwordReminderPhrase = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SetPasswordBindingModel", actual: "\(source)"))
            }
        }
        // Decoder for [UserInfoViewModel]
        Decoders.addDecoder(clazz: [UserInfoViewModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UserInfoViewModel]> in
            return Decoders.decode(clazz: [UserInfoViewModel].self, source: source)
        }

        // Decoder for UserInfoViewModel
        Decoders.addDecoder(clazz: UserInfoViewModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UserInfoViewModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UserInfoViewModel() : instance as! UserInfoViewModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"] as AnyObject?) {
                
                case let .success(value): _result.email = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["HasRegistered"] as AnyObject?) {
                
                case let .success(value): _result.hasRegistered = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["EmailVerified"] as AnyObject?) {
                
                case let .success(value): _result.emailVerified = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LoginProvider"] as AnyObject?) {
                
                case let .success(value): _result.loginProvider = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UserInfoViewModel", actual: "\(source)"))
            }
        }
        // Decoder for [UserLoginInfoViewModel]
        Decoders.addDecoder(clazz: [UserLoginInfoViewModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UserLoginInfoViewModel]> in
            return Decoders.decode(clazz: [UserLoginInfoViewModel].self, source: source)
        }

        // Decoder for UserLoginInfoViewModel
        Decoders.addDecoder(clazz: UserLoginInfoViewModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UserLoginInfoViewModel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UserLoginInfoViewModel() : instance as! UserLoginInfoViewModel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LoginProvider"] as AnyObject?) {
                
                case let .success(value): _result.loginProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProviderKey"] as AnyObject?) {
                
                case let .success(value): _result.providerKey = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UserLoginInfoViewModel", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
