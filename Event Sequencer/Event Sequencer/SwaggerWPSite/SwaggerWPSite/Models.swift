// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static public func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }
    
    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [Attachment]
        Decoders.addDecoder(clazz: [Attachment].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Attachment]> in
            return Decoders.decode(clazz: [Attachment].self, source: source)
        }

        // Decoder for Attachment
        Decoders.addDecoder(clazz: Attachment.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Attachment> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Attachment() : instance as! Attachment
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?) {
                
                case let .success(value): _result.date = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_gmt"] as AnyObject?) {
                
                case let .success(value): _result.dateGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostGuid.self, source: sourceDictionary["guid"] as AnyObject?) {
                
                case let .success(value): _result.guid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"] as AnyObject?) {
                
                case let .success(value): _result.link = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified"] as AnyObject?) {
                
                case let .success(value): _result.modified = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified_gmt"] as AnyObject?) {
                
                case let .success(value): _result.modifiedGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Attachment.Status.self, source: sourceDictionary["status"] as AnyObject?) {
                
                case let .success(value): _result.status = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostTitle.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["author"] as AnyObject?) {
                
                case let .success(value): _result.author = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Attachment.CommentStatus.self, source: sourceDictionary["comment_status"] as AnyObject?) {
                
                case let .success(value): _result.commentStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Attachment.PingStatus.self, source: sourceDictionary["ping_status"] as AnyObject?) {
                
                case let .success(value): _result.pingStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["meta"] as AnyObject?) {
                
                case let .success(value): _result.meta = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Attachment.Template.self, source: sourceDictionary["template"] as AnyObject?) {
                
                case let .success(value): _result.template = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alt_text"] as AnyObject?) {
                
                case let .success(value): _result.altText = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: AttachmentCaption.self, source: sourceDictionary["caption"] as AnyObject?) {
                
                case let .success(value): _result.caption = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: AttachmentDescription.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Attachment.MediaType.self, source: sourceDictionary["media_type"] as AnyObject?) {
                
                case let .success(value): _result.mediaType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mime_type"] as AnyObject?) {
                
                case let .success(value): _result.mimeType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["media_details"] as AnyObject?) {
                
                case let .success(value): _result.mediaDetails = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["post"] as AnyObject?) {
                
                case let .success(value): _result.post = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source_url"] as AnyObject?) {
                
                case let .success(value): _result.sourceUrl = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Attachment", actual: "\(source)"))
            }
        }
        // Decoder for [AttachmentCaption]
        Decoders.addDecoder(clazz: [AttachmentCaption].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AttachmentCaption]> in
            return Decoders.decode(clazz: [AttachmentCaption].self, source: source)
        }

        // Decoder for AttachmentCaption
        Decoders.addDecoder(clazz: AttachmentCaption.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AttachmentCaption> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AttachmentCaption() : instance as! AttachmentCaption
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["raw"] as AnyObject?) {
                
                case let .success(value): _result.raw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rendered"] as AnyObject?) {
                
                case let .success(value): _result.rendered = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AttachmentCaption", actual: "\(source)"))
            }
        }
        // Decoder for [AttachmentDescription]
        Decoders.addDecoder(clazz: [AttachmentDescription].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AttachmentDescription]> in
            return Decoders.decode(clazz: [AttachmentDescription].self, source: source)
        }

        // Decoder for AttachmentDescription
        Decoders.addDecoder(clazz: AttachmentDescription.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AttachmentDescription> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AttachmentDescription() : instance as! AttachmentDescription
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["raw"] as AnyObject?) {
                
                case let .success(value): _result.raw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rendered"] as AnyObject?) {
                
                case let .success(value): _result.rendered = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AttachmentDescription", actual: "\(source)"))
            }
        }
        // Decoder for [Category]
        Decoders.addDecoder(clazz: [Category].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Category]> in
            return Decoders.decode(clazz: [Category].self, source: source)
        }

        // Decoder for Category
        Decoders.addDecoder(clazz: Category.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Category> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Category() : instance as! Category
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"] as AnyObject?) {
                
                case let .success(value): _result.count = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"] as AnyObject?) {
                
                case let .success(value): _result.link = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Category.Taxonomy.self, source: sourceDictionary["taxonomy"] as AnyObject?) {
                
                case let .success(value): _result.taxonomy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent"] as AnyObject?) {
                
                case let .success(value): _result.parent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["meta"] as AnyObject?) {
                
                case let .success(value): _result.meta = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Category", actual: "\(source)"))
            }
        }
        // Decoder for [Comment]
        Decoders.addDecoder(clazz: [Comment].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Comment]> in
            return Decoders.decode(clazz: [Comment].self, source: source)
        }

        // Decoder for Comment
        Decoders.addDecoder(clazz: Comment.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Comment> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Comment() : instance as! Comment
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["author"] as AnyObject?) {
                
                case let .success(value): _result.author = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author_email"] as AnyObject?) {
                
                case let .success(value): _result.authorEmail = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author_ip"] as AnyObject?) {
                
                case let .success(value): _result.authorIp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author_name"] as AnyObject?) {
                
                case let .success(value): _result.authorName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author_url"] as AnyObject?) {
                
                case let .success(value): _result.authorUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author_user_agent"] as AnyObject?) {
                
                case let .success(value): _result.authorUserAgent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: CommentContent.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): _result.content = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?) {
                
                case let .success(value): _result.date = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_gmt"] as AnyObject?) {
                
                case let .success(value): _result.dateGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"] as AnyObject?) {
                
                case let .success(value): _result.link = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent"] as AnyObject?) {
                
                case let .success(value): _result.parent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["post"] as AnyObject?) {
                
                case let .success(value): _result.post = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?) {
                
                case let .success(value): _result.status = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: CommentAuthorAvatarUrls.self, source: sourceDictionary["author_avatar_urls"] as AnyObject?) {
                
                case let .success(value): _result.authorAvatarUrls = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["meta"] as AnyObject?) {
                
                case let .success(value): _result.meta = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Comment", actual: "\(source)"))
            }
        }
        // Decoder for [CommentAuthorAvatarUrls]
        Decoders.addDecoder(clazz: [CommentAuthorAvatarUrls].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[CommentAuthorAvatarUrls]> in
            return Decoders.decode(clazz: [CommentAuthorAvatarUrls].self, source: source)
        }

        // Decoder for CommentAuthorAvatarUrls
        Decoders.addDecoder(clazz: CommentAuthorAvatarUrls.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CommentAuthorAvatarUrls> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? CommentAuthorAvatarUrls() : instance as! CommentAuthorAvatarUrls
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["24"] as AnyObject?) {
                
                case let .success(value): _result._24 = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["48"] as AnyObject?) {
                
                case let .success(value): _result._48 = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["96"] as AnyObject?) {
                
                case let .success(value): _result._96 = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "CommentAuthorAvatarUrls", actual: "\(source)"))
            }
        }
        // Decoder for [CommentContent]
        Decoders.addDecoder(clazz: [CommentContent].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[CommentContent]> in
            return Decoders.decode(clazz: [CommentContent].self, source: source)
        }

        // Decoder for CommentContent
        Decoders.addDecoder(clazz: CommentContent.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CommentContent> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? CommentContent() : instance as! CommentContent
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["raw"] as AnyObject?) {
                
                case let .success(value): _result.raw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rendered"] as AnyObject?) {
                
                case let .success(value): _result.rendered = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "CommentContent", actual: "\(source)"))
            }
        }
        // Decoder for [ErrorData]
        Decoders.addDecoder(clazz: [ErrorData].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ErrorData]> in
            return Decoders.decode(clazz: [ErrorData].self, source: source)
        }

        // Decoder for ErrorData
        Decoders.addDecoder(clazz: ErrorData.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ErrorData> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ErrorData() : instance as! ErrorData
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"] as AnyObject?) {
                
                case let .success(value): _result.status = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ErrorData", actual: "\(source)"))
            }
        }
        // Decoder for [ModelError]
        Decoders.addDecoder(clazz: [ModelError].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ModelError]> in
            return Decoders.decode(clazz: [ModelError].self, source: source)
        }

        // Decoder for ModelError
        Decoders.addDecoder(clazz: ModelError.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ModelError> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ModelError() : instance as! ModelError
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?) {
                
                case let .success(value): _result.code = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?) {
                
                case let .success(value): _result.message = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ErrorData.self, source: sourceDictionary["data"] as AnyObject?) {
                
                case let .success(value): _result.data = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ModelError", actual: "\(source)"))
            }
        }
        // Decoder for [ModelType]
        Decoders.addDecoder(clazz: [ModelType].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ModelType]> in
            return Decoders.decode(clazz: [ModelType].self, source: source)
        }

        // Decoder for ModelType
        Decoders.addDecoder(clazz: ModelType.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ModelType> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ModelType() : instance as! ModelType
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["capabilities"] as AnyObject?) {
                
                case let .success(value): _result.capabilities = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hierarchical"] as AnyObject?) {
                
                case let .success(value): _result.hierarchical = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["labels"] as AnyObject?) {
                
                case let .success(value): _result.labels = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["taxonomies"] as AnyObject?) {
                
                case let .success(value): _result.taxonomies = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rest_base"] as AnyObject?) {
                
                case let .success(value): _result.restBase = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ModelType", actual: "\(source)"))
            }
        }
        // Decoder for [Page]
        Decoders.addDecoder(clazz: [Page].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Page]> in
            return Decoders.decode(clazz: [Page].self, source: source)
        }

        // Decoder for Page
        Decoders.addDecoder(clazz: Page.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Page> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Page() : instance as! Page
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?) {
                
                case let .success(value): _result.date = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_gmt"] as AnyObject?) {
                
                case let .success(value): _result.dateGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostGuid.self, source: sourceDictionary["guid"] as AnyObject?) {
                
                case let .success(value): _result.guid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"] as AnyObject?) {
                
                case let .success(value): _result.link = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified"] as AnyObject?) {
                
                case let .success(value): _result.modified = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified_gmt"] as AnyObject?) {
                
                case let .success(value): _result.modifiedGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Page.Status.self, source: sourceDictionary["status"] as AnyObject?) {
                
                case let .success(value): _result.status = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?) {
                
                case let .success(value): _result.password = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent"] as AnyObject?) {
                
                case let .success(value): _result.parent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostTitle.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostContent.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): _result.content = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["author"] as AnyObject?) {
                
                case let .success(value): _result.author = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostExcerpt.self, source: sourceDictionary["excerpt"] as AnyObject?) {
                
                case let .success(value): _result.excerpt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["featured_media"] as AnyObject?) {
                
                case let .success(value): _result.featuredMedia = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Page.CommentStatus.self, source: sourceDictionary["comment_status"] as AnyObject?) {
                
                case let .success(value): _result.commentStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Page.PingStatus.self, source: sourceDictionary["ping_status"] as AnyObject?) {
                
                case let .success(value): _result.pingStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["menu_order"] as AnyObject?) {
                
                case let .success(value): _result.menuOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["meta"] as AnyObject?) {
                
                case let .success(value): _result.meta = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Page.Template.self, source: sourceDictionary["template"] as AnyObject?) {
                
                case let .success(value): _result.template = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Page", actual: "\(source)"))
            }
        }
        // Decoder for [PageRevision]
        Decoders.addDecoder(clazz: [PageRevision].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PageRevision]> in
            return Decoders.decode(clazz: [PageRevision].self, source: source)
        }

        // Decoder for PageRevision
        Decoders.addDecoder(clazz: PageRevision.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PageRevision> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PageRevision() : instance as! PageRevision
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["author"] as AnyObject?) {
                
                case let .success(value): _result.author = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?) {
                
                case let .success(value): _result.date = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_gmt"] as AnyObject?) {
                
                case let .success(value): _result.dateGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostGuid.self, source: sourceDictionary["guid"] as AnyObject?) {
                
                case let .success(value): _result.guid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified"] as AnyObject?) {
                
                case let .success(value): _result.modified = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified_gmt"] as AnyObject?) {
                
                case let .success(value): _result.modifiedGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent"] as AnyObject?) {
                
                case let .success(value): _result.parent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostTitle.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostContent.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): _result.content = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostExcerpt.self, source: sourceDictionary["excerpt"] as AnyObject?) {
                
                case let .success(value): _result.excerpt = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PageRevision", actual: "\(source)"))
            }
        }
        // Decoder for [Post]
        Decoders.addDecoder(clazz: [Post].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Post]> in
            return Decoders.decode(clazz: [Post].self, source: source)
        }

        // Decoder for Post
        Decoders.addDecoder(clazz: Post.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Post> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Post() : instance as! Post
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?) {
                
                case let .success(value): _result.date = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_gmt"] as AnyObject?) {
                
                case let .success(value): _result.dateGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostGuid.self, source: sourceDictionary["guid"] as AnyObject?) {
                
                case let .success(value): _result.guid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"] as AnyObject?) {
                
                case let .success(value): _result.link = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified"] as AnyObject?) {
                
                case let .success(value): _result.modified = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified_gmt"] as AnyObject?) {
                
                case let .success(value): _result.modifiedGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Post.Status.self, source: sourceDictionary["status"] as AnyObject?) {
                
                case let .success(value): _result.status = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?) {
                
                case let .success(value): _result.password = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostTitle.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostContent.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): _result.content = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["author"] as AnyObject?) {
                
                case let .success(value): _result.author = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostExcerpt.self, source: sourceDictionary["excerpt"] as AnyObject?) {
                
                case let .success(value): _result.excerpt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["featured_media"] as AnyObject?) {
                
                case let .success(value): _result.featuredMedia = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Post.CommentStatus.self, source: sourceDictionary["comment_status"] as AnyObject?) {
                
                case let .success(value): _result.commentStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Post.PingStatus.self, source: sourceDictionary["ping_status"] as AnyObject?) {
                
                case let .success(value): _result.pingStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Post.Format.self, source: sourceDictionary["format"] as AnyObject?) {
                
                case let .success(value): _result.format = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["meta"] as AnyObject?) {
                
                case let .success(value): _result.meta = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sticky"] as AnyObject?) {
                
                case let .success(value): _result.sticky = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Post.Template.self, source: sourceDictionary["template"] as AnyObject?) {
                
                case let .success(value): _result.template = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["categories"] as AnyObject?) {
                
                case let .success(value): _result.categories = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["tags"] as AnyObject?) {
                
                case let .success(value): _result.tags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Post", actual: "\(source)"))
            }
        }
        // Decoder for [PostContent]
        Decoders.addDecoder(clazz: [PostContent].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PostContent]> in
            return Decoders.decode(clazz: [PostContent].self, source: source)
        }

        // Decoder for PostContent
        Decoders.addDecoder(clazz: PostContent.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PostContent> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PostContent() : instance as! PostContent
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["raw"] as AnyObject?) {
                
                case let .success(value): _result.raw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rendered"] as AnyObject?) {
                
                case let .success(value): _result.rendered = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["protected"] as AnyObject?) {
                
                case let .success(value): _result.protected = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PostContent", actual: "\(source)"))
            }
        }
        // Decoder for [PostExcerpt]
        Decoders.addDecoder(clazz: [PostExcerpt].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PostExcerpt]> in
            return Decoders.decode(clazz: [PostExcerpt].self, source: source)
        }

        // Decoder for PostExcerpt
        Decoders.addDecoder(clazz: PostExcerpt.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PostExcerpt> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PostExcerpt() : instance as! PostExcerpt
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["raw"] as AnyObject?) {
                
                case let .success(value): _result.raw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rendered"] as AnyObject?) {
                
                case let .success(value): _result.rendered = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["protected"] as AnyObject?) {
                
                case let .success(value): _result.protected = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PostExcerpt", actual: "\(source)"))
            }
        }
        // Decoder for [PostGuid]
        Decoders.addDecoder(clazz: [PostGuid].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PostGuid]> in
            return Decoders.decode(clazz: [PostGuid].self, source: source)
        }

        // Decoder for PostGuid
        Decoders.addDecoder(clazz: PostGuid.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PostGuid> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PostGuid() : instance as! PostGuid
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["raw"] as AnyObject?) {
                
                case let .success(value): _result.raw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rendered"] as AnyObject?) {
                
                case let .success(value): _result.rendered = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PostGuid", actual: "\(source)"))
            }
        }
        // Decoder for [PostRevision]
        Decoders.addDecoder(clazz: [PostRevision].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PostRevision]> in
            return Decoders.decode(clazz: [PostRevision].self, source: source)
        }

        // Decoder for PostRevision
        Decoders.addDecoder(clazz: PostRevision.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PostRevision> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PostRevision() : instance as! PostRevision
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["author"] as AnyObject?) {
                
                case let .success(value): _result.author = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?) {
                
                case let .success(value): _result.date = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_gmt"] as AnyObject?) {
                
                case let .success(value): _result.dateGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostGuid.self, source: sourceDictionary["guid"] as AnyObject?) {
                
                case let .success(value): _result.guid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified"] as AnyObject?) {
                
                case let .success(value): _result.modified = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["modified_gmt"] as AnyObject?) {
                
                case let .success(value): _result.modifiedGmt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent"] as AnyObject?) {
                
                case let .success(value): _result.parent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostTitle.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostContent.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): _result.content = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: PostExcerpt.self, source: sourceDictionary["excerpt"] as AnyObject?) {
                
                case let .success(value): _result.excerpt = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PostRevision", actual: "\(source)"))
            }
        }
        // Decoder for [PostTitle]
        Decoders.addDecoder(clazz: [PostTitle].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PostTitle]> in
            return Decoders.decode(clazz: [PostTitle].self, source: source)
        }

        // Decoder for PostTitle
        Decoders.addDecoder(clazz: PostTitle.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PostTitle> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PostTitle() : instance as! PostTitle
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["raw"] as AnyObject?) {
                
                case let .success(value): _result.raw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rendered"] as AnyObject?) {
                
                case let .success(value): _result.rendered = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PostTitle", actual: "\(source)"))
            }
        }
        // Decoder for [Settings]
        Decoders.addDecoder(clazz: [Settings].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Settings]> in
            return Decoders.decode(clazz: [Settings].self, source: source)
        }

        // Decoder for Settings
        Decoders.addDecoder(clazz: Settings.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Settings> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Settings() : instance as! Settings
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): _result.url = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?) {
                
                case let .success(value): _result.email = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"] as AnyObject?) {
                
                case let .success(value): _result.timezone = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date_format"] as AnyObject?) {
                
                case let .success(value): _result.dateFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["time_format"] as AnyObject?) {
                
                case let .success(value): _result.timeFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["start_of_week"] as AnyObject?) {
                
                case let .success(value): _result.startOfWeek = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language"] as AnyObject?) {
                
                case let .success(value): _result.language = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_smilies"] as AnyObject?) {
                
                case let .success(value): _result.useSmilies = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["default_category"] as AnyObject?) {
                
                case let .success(value): _result.defaultCategory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_post_format"] as AnyObject?) {
                
                case let .success(value): _result.defaultPostFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["posts_per_page"] as AnyObject?) {
                
                case let .success(value): _result.postsPerPage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Settings.DefaultPingStatus.self, source: sourceDictionary["default_ping_status"] as AnyObject?) {
                
                case let .success(value): _result.defaultPingStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Settings.DefaultCommentStatus.self, source: sourceDictionary["default_comment_status"] as AnyObject?) {
                
                case let .success(value): _result.defaultCommentStatus = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Settings", actual: "\(source)"))
            }
        }
        // Decoder for [Status]
        Decoders.addDecoder(clazz: [Status].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Status]> in
            return Decoders.decode(clazz: [Status].self, source: source)
        }

        // Decoder for Status
        Decoders.addDecoder(clazz: Status.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Status> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Status() : instance as! Status
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["private"] as AnyObject?) {
                
                case let .success(value): _result._private = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["protected"] as AnyObject?) {
                
                case let .success(value): _result.protected = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["public"] as AnyObject?) {
                
                case let .success(value): _result._public = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["queryable"] as AnyObject?) {
                
                case let .success(value): _result.queryable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["show_in_list"] as AnyObject?) {
                
                case let .success(value): _result.showInList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Status", actual: "\(source)"))
            }
        }
        // Decoder for [Tag]
        Decoders.addDecoder(clazz: [Tag].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Tag]> in
            return Decoders.decode(clazz: [Tag].self, source: source)
        }

        // Decoder for Tag
        Decoders.addDecoder(clazz: Tag.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Tag> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Tag() : instance as! Tag
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"] as AnyObject?) {
                
                case let .success(value): _result.count = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"] as AnyObject?) {
                
                case let .success(value): _result.link = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Tag.Taxonomy.self, source: sourceDictionary["taxonomy"] as AnyObject?) {
                
                case let .success(value): _result.taxonomy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["meta"] as AnyObject?) {
                
                case let .success(value): _result.meta = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Tag", actual: "\(source)"))
            }
        }
        // Decoder for [Taxonomy]
        Decoders.addDecoder(clazz: [Taxonomy].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Taxonomy]> in
            return Decoders.decode(clazz: [Taxonomy].self, source: source)
        }

        // Decoder for Taxonomy
        Decoders.addDecoder(clazz: Taxonomy.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Taxonomy> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Taxonomy() : instance as! Taxonomy
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["capabilities"] as AnyObject?) {
                
                case let .success(value): _result.capabilities = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hierarchical"] as AnyObject?) {
                
                case let .success(value): _result.hierarchical = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["labels"] as AnyObject?) {
                
                case let .success(value): _result.labels = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?) {
                
                case let .success(value): _result.slug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["show_cloud"] as AnyObject?) {
                
                case let .success(value): _result.showCloud = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["types"] as AnyObject?) {
                
                case let .success(value): _result.types = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rest_base"] as AnyObject?) {
                
                case let .success(value): _result.restBase = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Taxonomy", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
