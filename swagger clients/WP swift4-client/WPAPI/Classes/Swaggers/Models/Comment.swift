//
// Comment.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Comment: Codable {

    /** Unique identifier for the object. */
    public var id: Int?
    /** The ID of the user object, if author was a user. */
    public var author: Int?
    /** Email address for the object author. */
    public var authorEmail: String?
    /** IP address for the object author. */
    public var authorIp: String?
    /** Display name for the object author. */
    public var authorName: String?
    /** URL for the object author. */
    public var authorUrl: String?
    /** User agent for the object author. */
    public var authorUserAgent: String?
    public var content: CommentContent?
    /** The date the object was published, in the site&#39;s timezone. */
    public var date: Date?
    /** The date the object was published, as GMT. */
    public var dateGmt: Date?
    /** URL to the object. */
    public var link: String?
    /** The ID for the parent of the object. */
    public var parent: Int?
    /** The ID of the associated post object. */
    public var post: Int?
    /** State of the object. */
    public var status: String?
    /** Type of Comment for the object. */
    public var type: String?
    public var authorAvatarUrls: CommentAuthorAvatarUrls?
    /** Meta fields. */
    public var meta: Any?


    
    public init(id: Int?, author: Int?, authorEmail: String?, authorIp: String?, authorName: String?, authorUrl: String?, authorUserAgent: String?, content: CommentContent?, date: Date?, dateGmt: Date?, link: String?, parent: Int?, post: Int?, status: String?, type: String?, authorAvatarUrls: CommentAuthorAvatarUrls?, meta: Any?) {
        self.id = id
        self.author = author
        self.authorEmail = authorEmail
        self.authorIp = authorIp
        self.authorName = authorName
        self.authorUrl = authorUrl
        self.authorUserAgent = authorUserAgent
        self.content = content
        self.date = date
        self.dateGmt = dateGmt
        self.link = link
        self.parent = parent
        self.post = post
        self.status = status
        self.type = type
        self.authorAvatarUrls = authorAvatarUrls
        self.meta = meta
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(author, forKey: "author")
        try container.encodeIfPresent(authorEmail, forKey: "author_email")
        try container.encodeIfPresent(authorIp, forKey: "author_ip")
        try container.encodeIfPresent(authorName, forKey: "author_name")
        try container.encodeIfPresent(authorUrl, forKey: "author_url")
        try container.encodeIfPresent(authorUserAgent, forKey: "author_user_agent")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(dateGmt, forKey: "date_gmt")
        try container.encodeIfPresent(link, forKey: "link")
        try container.encodeIfPresent(parent, forKey: "parent")
        try container.encodeIfPresent(post, forKey: "post")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(authorAvatarUrls, forKey: "author_avatar_urls")
        try container.encodeIfPresent(meta, forKey: "meta")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "id")
        author = try container.decodeIfPresent(Int.self, forKey: "author")
        authorEmail = try container.decodeIfPresent(String.self, forKey: "author_email")
        authorIp = try container.decodeIfPresent(String.self, forKey: "author_ip")
        authorName = try container.decodeIfPresent(String.self, forKey: "author_name")
        authorUrl = try container.decodeIfPresent(String.self, forKey: "author_url")
        authorUserAgent = try container.decodeIfPresent(String.self, forKey: "author_user_agent")
        content = try container.decodeIfPresent(CommentContent.self, forKey: "content")
        date = try container.decodeIfPresent(Date.self, forKey: "date")
        dateGmt = try container.decodeIfPresent(Date.self, forKey: "date_gmt")
        link = try container.decodeIfPresent(String.self, forKey: "link")
        parent = try container.decodeIfPresent(Int.self, forKey: "parent")
        post = try container.decodeIfPresent(Int.self, forKey: "post")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        type = try container.decodeIfPresent(String.self, forKey: "type")
        authorAvatarUrls = try container.decodeIfPresent(CommentAuthorAvatarUrls.self, forKey: "author_avatar_urls")
        meta = try container.decodeIfPresent(Any.self, forKey: "meta")
    }
}

