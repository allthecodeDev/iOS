//
// Category.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Category: Codable {

    public enum Taxonomy: String, Codable { 
        case category = "category"
        case postTag = "post_tag"
        case navMenu = "nav_menu"
        case linkCategory = "link_category"
        case postFormat = "post_format"
    }
    /** Unique identifier for the term. */
    public var id: Int?
    /** Number of published posts for the term. */
    public var count: Int?
    /** HTML description of the term. */
    public var description: String?
    /** URL of the term. */
    public var link: String?
    /** HTML title for the term. */
    public var name: String?
    /** An alphanumeric identifier for the term unique to its type. */
    public var slug: String?
    /** Type attribution for the term. */
    public var taxonomy: Taxonomy?
    /** The parent term ID. */
    public var parent: Int?
    /** Meta fields. */
    public var meta: Any?


    
    public init(id: Int?, count: Int?, description: String?, link: String?, name: String?, slug: String?, taxonomy: Taxonomy?, parent: Int?, meta: Any?) {
        self.id = id
        self.count = count
        self.description = description
        self.link = link
        self.name = name
        self.slug = slug
        self.taxonomy = taxonomy
        self.parent = parent
        self.meta = meta
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(count, forKey: "count")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(link, forKey: "link")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(slug, forKey: "slug")
        try container.encodeIfPresent(taxonomy, forKey: "taxonomy")
        try container.encodeIfPresent(parent, forKey: "parent")
        try container.encodeIfPresent(meta, forKey: "meta")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "id")
        count = try container.decodeIfPresent(Int.self, forKey: "count")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        link = try container.decodeIfPresent(String.self, forKey: "link")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        slug = try container.decodeIfPresent(String.self, forKey: "slug")
        taxonomy = try container.decodeIfPresent(Taxonomy.self, forKey: "taxonomy")
        parent = try container.decodeIfPresent(Int.self, forKey: "parent")
        meta = try container.decodeIfPresent(Any.self, forKey: "meta")
    }
}

