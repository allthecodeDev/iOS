//
// Status.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Status: Codable {

    /** The title for the status. */
    public var name: String?
    /** Whether posts with this status should be private. */
    public var _private: Bool?
    /** Whether posts with this status should be protected. */
    public var protected: Bool?
    /** Whether posts of this status should be shown in the front end of the site. */
    public var _public: Bool?
    /** Whether posts with this status should be publicly-queryable. */
    public var queryable: Bool?
    /** Whether to include posts in the edit listing for their post type. */
    public var showInList: Bool?
    /** An alphanumeric identifier for the status. */
    public var slug: String?


    
    public init(name: String?, _private: Bool?, protected: Bool?, _public: Bool?, queryable: Bool?, showInList: Bool?, slug: String?) {
        self.name = name
        self._private = _private
        self.protected = protected
        self._public = _public
        self.queryable = queryable
        self.showInList = showInList
        self.slug = slug
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(_private, forKey: "private")
        try container.encodeIfPresent(protected, forKey: "protected")
        try container.encodeIfPresent(_public, forKey: "public")
        try container.encodeIfPresent(queryable, forKey: "queryable")
        try container.encodeIfPresent(showInList, forKey: "show_in_list")
        try container.encodeIfPresent(slug, forKey: "slug")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        name = try container.decodeIfPresent(String.self, forKey: "name")
        _private = try container.decodeIfPresent(Bool.self, forKey: "private")
        protected = try container.decodeIfPresent(Bool.self, forKey: "protected")
        _public = try container.decodeIfPresent(Bool.self, forKey: "public")
        queryable = try container.decodeIfPresent(Bool.self, forKey: "queryable")
        showInList = try container.decodeIfPresent(Bool.self, forKey: "show_in_list")
        slug = try container.decodeIfPresent(String.self, forKey: "slug")
    }
}

