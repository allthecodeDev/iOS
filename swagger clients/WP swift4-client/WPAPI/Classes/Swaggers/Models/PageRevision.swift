//
// PageRevision.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PageRevision: Codable {

    /** The ID for the author of the object. */
    public var author: Int?
    /** The date the object was published, in the site&#39;s timezone. */
    public var date: Date?
    /** The date the object was published, as GMT. */
    public var dateGmt: Date?
    public var guid: PostGuid?
    /** Unique identifier for the object. */
    public var id: Int?
    /** The date the object was last modified, in the site&#39;s timezone. */
    public var modified: Date?
    /** The date the object was last modified, as GMT. */
    public var modifiedGmt: Date?
    /** The ID for the parent of the object. */
    public var parent: Int?
    /** An alphanumeric identifier for the object unique to its type. */
    public var slug: String?
    public var title: PostTitle?
    public var content: PostContent?
    public var excerpt: PostExcerpt?


    
    public init(author: Int?, date: Date?, dateGmt: Date?, guid: PostGuid?, id: Int?, modified: Date?, modifiedGmt: Date?, parent: Int?, slug: String?, title: PostTitle?, content: PostContent?, excerpt: PostExcerpt?) {
        self.author = author
        self.date = date
        self.dateGmt = dateGmt
        self.guid = guid
        self.id = id
        self.modified = modified
        self.modifiedGmt = modifiedGmt
        self.parent = parent
        self.slug = slug
        self.title = title
        self.content = content
        self.excerpt = excerpt
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(author, forKey: "author")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(dateGmt, forKey: "date_gmt")
        try container.encodeIfPresent(guid, forKey: "guid")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(modified, forKey: "modified")
        try container.encodeIfPresent(modifiedGmt, forKey: "modified_gmt")
        try container.encodeIfPresent(parent, forKey: "parent")
        try container.encodeIfPresent(slug, forKey: "slug")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(excerpt, forKey: "excerpt")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        author = try container.decodeIfPresent(Int.self, forKey: "author")
        date = try container.decodeIfPresent(Date.self, forKey: "date")
        dateGmt = try container.decodeIfPresent(Date.self, forKey: "date_gmt")
        guid = try container.decodeIfPresent(PostGuid.self, forKey: "guid")
        id = try container.decodeIfPresent(Int.self, forKey: "id")
        modified = try container.decodeIfPresent(Date.self, forKey: "modified")
        modifiedGmt = try container.decodeIfPresent(Date.self, forKey: "modified_gmt")
        parent = try container.decodeIfPresent(Int.self, forKey: "parent")
        slug = try container.decodeIfPresent(String.self, forKey: "slug")
        title = try container.decodeIfPresent(PostTitle.self, forKey: "title")
        content = try container.decodeIfPresent(PostContent.self, forKey: "content")
        excerpt = try container.decodeIfPresent(PostExcerpt.self, forKey: "excerpt")
    }
}

