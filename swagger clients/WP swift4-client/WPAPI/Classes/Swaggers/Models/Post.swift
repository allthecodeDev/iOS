//
// Post.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Post: Codable {

    public enum Status: String, Codable { 
        case publish = "publish"
        case future = "future"
        case draft = "draft"
        case pending = "pending"
        case _private = "private"
    }
    public enum CommentStatus: String, Codable { 
        case open = "open"
        case closed = "closed"
    }
    public enum PingStatus: String, Codable { 
        case open = "open"
        case closed = "closed"
    }
    public enum Format: String, Codable { 
        case standard = "standard"
        case aside = "aside"
        case chat = "chat"
        case gallery = "gallery"
        case link = "link"
        case image = "image"
        case quote = "quote"
        case status = "status"
        case video = "video"
        case audio = "audio"
    }
    public enum Template: String, Codable { 
        case empty = ""
    }
    /** The date the object was published, in the site&#39;s timezone. */
    public var date: Date?
    /** The date the object was published, as GMT. */
    public var dateGmt: Date?
    public var guid: PostGuid?
    /** Unique identifier for the object. */
    public var id: Int?
    /** URL to the object. */
    public var link: String?
    /** The date the object was last modified, in the site&#39;s timezone. */
    public var modified: Date?
    /** The date the object was last modified, as GMT. */
    public var modifiedGmt: Date?
    /** An alphanumeric identifier for the object unique to its type. */
    public var slug: String?
    /** A named status for the object. */
    public var status: Status?
    /** Type of Post for the object. */
    public var type: String?
    /** A password to protect access to the content and excerpt. */
    public var password: String?
    public var title: PostTitle?
    public var content: PostContent?
    /** The ID for the author of the object. */
    public var author: Int?
    public var excerpt: PostExcerpt?
    /** The ID of the featured media for the object. */
    public var featuredMedia: Int?
    /** Whether or not comments are open on the object. */
    public var commentStatus: CommentStatus?
    /** Whether or not the object can be pinged. */
    public var pingStatus: PingStatus?
    /** The format for the object. */
    public var format: Format?
    /** Meta fields. */
    public var meta: Any?
    /** Whether or not the object should be treated as sticky. */
    public var sticky: Bool?
    /** The theme file to use to display the object. */
    public var template: Template?
    /** The terms assigned to the object in the category taxonomy. */
    public var categories: [String]?
    /** The terms assigned to the object in the post_tag taxonomy. */
    public var tags: [String]?


    
    public init(date: Date?, dateGmt: Date?, guid: PostGuid?, id: Int?, link: String?, modified: Date?, modifiedGmt: Date?, slug: String?, status: Status?, type: String?, password: String?, title: PostTitle?, content: PostContent?, author: Int?, excerpt: PostExcerpt?, featuredMedia: Int?, commentStatus: CommentStatus?, pingStatus: PingStatus?, format: Format?, meta: Any?, sticky: Bool?, template: Template?, categories: [String]?, tags: [String]?) {
        self.date = date
        self.dateGmt = dateGmt
        self.guid = guid
        self.id = id
        self.link = link
        self.modified = modified
        self.modifiedGmt = modifiedGmt
        self.slug = slug
        self.status = status
        self.type = type
        self.password = password
        self.title = title
        self.content = content
        self.author = author
        self.excerpt = excerpt
        self.featuredMedia = featuredMedia
        self.commentStatus = commentStatus
        self.pingStatus = pingStatus
        self.format = format
        self.meta = meta
        self.sticky = sticky
        self.template = template
        self.categories = categories
        self.tags = tags
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(dateGmt, forKey: "date_gmt")
        try container.encodeIfPresent(guid, forKey: "guid")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(link, forKey: "link")
        try container.encodeIfPresent(modified, forKey: "modified")
        try container.encodeIfPresent(modifiedGmt, forKey: "modified_gmt")
        try container.encodeIfPresent(slug, forKey: "slug")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(password, forKey: "password")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(author, forKey: "author")
        try container.encodeIfPresent(excerpt, forKey: "excerpt")
        try container.encodeIfPresent(featuredMedia, forKey: "featured_media")
        try container.encodeIfPresent(commentStatus, forKey: "comment_status")
        try container.encodeIfPresent(pingStatus, forKey: "ping_status")
        try container.encodeIfPresent(format, forKey: "format")
        try container.encodeIfPresent(meta, forKey: "meta")
        try container.encodeIfPresent(sticky, forKey: "sticky")
        try container.encodeIfPresent(template, forKey: "template")
        try container.encodeIfPresent(categories, forKey: "categories")
        try container.encodeIfPresent(tags, forKey: "tags")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        date = try container.decodeIfPresent(Date.self, forKey: "date")
        dateGmt = try container.decodeIfPresent(Date.self, forKey: "date_gmt")
        guid = try container.decodeIfPresent(PostGuid.self, forKey: "guid")
        id = try container.decodeIfPresent(Int.self, forKey: "id")
        link = try container.decodeIfPresent(String.self, forKey: "link")
        modified = try container.decodeIfPresent(Date.self, forKey: "modified")
        modifiedGmt = try container.decodeIfPresent(Date.self, forKey: "modified_gmt")
        slug = try container.decodeIfPresent(String.self, forKey: "slug")
        status = try container.decodeIfPresent(Status.self, forKey: "status")
        type = try container.decodeIfPresent(String.self, forKey: "type")
        password = try container.decodeIfPresent(String.self, forKey: "password")
        title = try container.decodeIfPresent(PostTitle.self, forKey: "title")
        content = try container.decodeIfPresent(PostContent.self, forKey: "content")
        author = try container.decodeIfPresent(Int.self, forKey: "author")
        excerpt = try container.decodeIfPresent(PostExcerpt.self, forKey: "excerpt")
        featuredMedia = try container.decodeIfPresent(Int.self, forKey: "featured_media")
        commentStatus = try container.decodeIfPresent(CommentStatus.self, forKey: "comment_status")
        pingStatus = try container.decodeIfPresent(PingStatus.self, forKey: "ping_status")
        format = try container.decodeIfPresent(Format.self, forKey: "format")
        meta = try container.decodeIfPresent(Any.self, forKey: "meta")
        sticky = try container.decodeIfPresent(Bool.self, forKey: "sticky")
        template = try container.decodeIfPresent(Template.self, forKey: "template")
        categories = try container.decodeIfPresent([String].self, forKey: "categories")
        tags = try container.decodeIfPresent([String].self, forKey: "tags")
    }
}

