//
// Settings.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Settings: Codable {

    public enum DefaultPingStatus: String, Codable { 
        case open = "open"
        case closed = "closed"
    }
    public enum DefaultCommentStatus: String, Codable { 
        case open = "open"
        case closed = "closed"
    }
    /** Site title. */
    public var title: String?
    /** Site tagline. */
    public var description: String?
    /** Site URL. */
    public var url: String?
    /** This address is used for admin purposes, like new user notification. */
    public var email: String?
    /** A city in the same timezone as you. */
    public var timezone: String?
    /** A date format for all date strings. */
    public var dateFormat: String?
    /** A time format for all time strings. */
    public var timeFormat: String?
    /** A day number of the week that the week should start on. */
    public var startOfWeek: Int?
    /** WordPress locale code. */
    public var language: String?
    /** Convert emoticons like :-) and :-P to graphics on display. */
    public var useSmilies: Bool?
    /** Default post category. */
    public var defaultCategory: Int?
    /** Default post format. */
    public var defaultPostFormat: String?
    /** Blog pages show at most. */
    public var postsPerPage: Int?
    /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
    public var defaultPingStatus: DefaultPingStatus?
    /** Allow people to post comments on new articles. */
    public var defaultCommentStatus: DefaultCommentStatus?


    
    public init(title: String?, description: String?, url: String?, email: String?, timezone: String?, dateFormat: String?, timeFormat: String?, startOfWeek: Int?, language: String?, useSmilies: Bool?, defaultCategory: Int?, defaultPostFormat: String?, postsPerPage: Int?, defaultPingStatus: DefaultPingStatus?, defaultCommentStatus: DefaultCommentStatus?) {
        self.title = title
        self.description = description
        self.url = url
        self.email = email
        self.timezone = timezone
        self.dateFormat = dateFormat
        self.timeFormat = timeFormat
        self.startOfWeek = startOfWeek
        self.language = language
        self.useSmilies = useSmilies
        self.defaultCategory = defaultCategory
        self.defaultPostFormat = defaultPostFormat
        self.postsPerPage = postsPerPage
        self.defaultPingStatus = defaultPingStatus
        self.defaultCommentStatus = defaultCommentStatus
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(timezone, forKey: "timezone")
        try container.encodeIfPresent(dateFormat, forKey: "date_format")
        try container.encodeIfPresent(timeFormat, forKey: "time_format")
        try container.encodeIfPresent(startOfWeek, forKey: "start_of_week")
        try container.encodeIfPresent(language, forKey: "language")
        try container.encodeIfPresent(useSmilies, forKey: "use_smilies")
        try container.encodeIfPresent(defaultCategory, forKey: "default_category")
        try container.encodeIfPresent(defaultPostFormat, forKey: "default_post_format")
        try container.encodeIfPresent(postsPerPage, forKey: "posts_per_page")
        try container.encodeIfPresent(defaultPingStatus, forKey: "default_ping_status")
        try container.encodeIfPresent(defaultCommentStatus, forKey: "default_comment_status")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        timezone = try container.decodeIfPresent(String.self, forKey: "timezone")
        dateFormat = try container.decodeIfPresent(String.self, forKey: "date_format")
        timeFormat = try container.decodeIfPresent(String.self, forKey: "time_format")
        startOfWeek = try container.decodeIfPresent(Int.self, forKey: "start_of_week")
        language = try container.decodeIfPresent(String.self, forKey: "language")
        useSmilies = try container.decodeIfPresent(Bool.self, forKey: "use_smilies")
        defaultCategory = try container.decodeIfPresent(Int.self, forKey: "default_category")
        defaultPostFormat = try container.decodeIfPresent(String.self, forKey: "default_post_format")
        postsPerPage = try container.decodeIfPresent(Int.self, forKey: "posts_per_page")
        defaultPingStatus = try container.decodeIfPresent(DefaultPingStatus.self, forKey: "default_ping_status")
        defaultCommentStatus = try container.decodeIfPresent(DefaultCommentStatus.self, forKey: "default_comment_status")
    }
}

