//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**
     * enum for parameter context
     */
    public enum Context_wpV2CategoriesGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**
     * enum for parameter order
     */
    public enum Order_wpV2CategoriesGet: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter orderby
     */
    public enum Orderby_wpV2CategoriesGet: String { 
        case id = "id"
        case include = "include"
        case name = "name"
        case slug = "slug"
        case termGroup = "term_group"
        case description = "description"
        case count = "count"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to asc)
     - parameter orderby: (query) Sort collection by term attribute. (optional, default to name)
     - parameter hideEmpty: (query) Whether to hide terms not assigned to any posts. (optional)
     - parameter parent: (query) Limit result set to terms assigned to a specific parent. (optional)
     - parameter post: (query) Limit result set to terms assigned to a specific post. (optional)
     - parameter slug: (query) Limit result set to terms with a specific slug. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CategoriesGet(context: Context_wpV2CategoriesGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, exclude: [String]? = nil, include: [String]? = nil, order: Order_wpV2CategoriesGet? = nil, orderby: Orderby_wpV2CategoriesGet? = nil, hideEmpty: Bool? = nil, parent: Int? = nil, post: Int? = nil, slug: [String]? = nil, completion: @escaping ((_ data: [Category]?,_ error: Error?) -> Void)) {
        wpV2CategoriesGetWithRequestBuilder(context: context, page: page, perPage: perPage, search: search, exclude: exclude, include: include, order: order, orderby: orderby, hideEmpty: hideEmpty, parent: parent, post: post, slug: slug).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/categories
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "parent" : 1,
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}, {
  "parent" : 1,
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to asc)
     - parameter orderby: (query) Sort collection by term attribute. (optional, default to name)
     - parameter hideEmpty: (query) Whether to hide terms not assigned to any posts. (optional)
     - parameter parent: (query) Limit result set to terms assigned to a specific parent. (optional)
     - parameter post: (query) Limit result set to terms assigned to a specific post. (optional)
     - parameter slug: (query) Limit result set to terms with a specific slug. (optional)

     - returns: RequestBuilder<[Category]> 
     */
    open class func wpV2CategoriesGetWithRequestBuilder(context: Context_wpV2CategoriesGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, exclude: [String]? = nil, include: [String]? = nil, order: Order_wpV2CategoriesGet? = nil, orderby: Orderby_wpV2CategoriesGet? = nil, hideEmpty: Bool? = nil, parent: Int? = nil, post: Int? = nil, slug: [String]? = nil) -> RequestBuilder<[Category]> {
        let path = "/wp/v2/categories"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "search": search, 
            "exclude": exclude, 
            "include": include, 
            "order": order?.rawValue, 
            "orderby": orderby?.rawValue, 
            "hide_empty": hideEmpty, 
            "parent": parent?.encodeToJSON(), 
            "post": post?.encodeToJSON(), 
            "slug": slug
        ])
        

        let requestBuilder: RequestBuilder<[Category]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter force: (query) Required to be true, as terms do not support binning. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CategoriesIdDelete(id: String, id2: Int? = nil, force: Bool? = nil, completion: @escaping ((_ data: Category?,_ error: Error?) -> Void)) {
        wpV2CategoriesIdDeleteWithRequestBuilder(id: id, id2: id2, force: force).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/categories/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "parent" : 1,
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter force: (query) Required to be true, as terms do not support binning. (optional)

     - returns: RequestBuilder<Category> 
     */
    open class func wpV2CategoriesIdDeleteWithRequestBuilder(id: String, id2: Int? = nil, force: Bool? = nil) -> RequestBuilder<Category> {
        var path = "/wp/v2/categories/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "force": force
        ])
        

        let requestBuilder: RequestBuilder<Category>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2CategoriesIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CategoriesIdGet(id: String, id2: Int? = nil, context: Context_wpV2CategoriesIdGet? = nil, completion: @escaping ((_ data: Category?,_ error: Error?) -> Void)) {
        wpV2CategoriesIdGetWithRequestBuilder(id: id, id2: id2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/categories/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "parent" : 1,
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<Category> 
     */
    open class func wpV2CategoriesIdGetWithRequestBuilder(id: String, id2: Int? = nil, context: Context_wpV2CategoriesIdGet? = nil) -> RequestBuilder<Category> {
        var path = "/wp/v2/categories/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<Category>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the term. (optional)
     - parameter description: (form) HTML description of the term. (optional)
     - parameter name: (form) HTML title for the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter parent: (form) The parent term ID. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CategoriesIdPost(id: String, id2: Int? = nil, description: String? = nil, name: String? = nil, slug: String? = nil, parent: Int? = nil, meta: String? = nil, completion: @escaping ((_ data: Category?,_ error: Error?) -> Void)) {
        wpV2CategoriesIdPostWithRequestBuilder(id: id, id2: id2, description: description, name: name, slug: slug, parent: parent, meta: meta).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/categories/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "parent" : 1,
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the term. (optional)
     - parameter description: (form) HTML description of the term. (optional)
     - parameter name: (form) HTML title for the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter parent: (form) The parent term ID. (optional)
     - parameter meta: (form) Meta fields. (optional)

     - returns: RequestBuilder<Category> 
     */
    open class func wpV2CategoriesIdPostWithRequestBuilder(id: String, id2: Int? = nil, description: String? = nil, name: String? = nil, slug: String? = nil, parent: Int? = nil, meta: String? = nil) -> RequestBuilder<Category> {
        var path = "/wp/v2/categories/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id2?.encodeToJSON(),
            "description": description,
            "name": name,
            "slug": slug,
            "parent": parent?.encodeToJSON(),
            "meta": meta
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Category>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (form) HTML title for the term. 
     - parameter description: (form) HTML description of the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter parent: (form) The parent term ID. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CategoriesPost(name: String, description: String? = nil, slug: String? = nil, parent: Int? = nil, meta: String? = nil, completion: @escaping ((_ data: Category?,_ error: Error?) -> Void)) {
        wpV2CategoriesPostWithRequestBuilder(name: name, description: description, slug: slug, parent: parent, meta: meta).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/categories
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "parent" : 1,
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter name: (form) HTML title for the term. 
     - parameter description: (form) HTML description of the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter parent: (form) The parent term ID. (optional)
     - parameter meta: (form) Meta fields. (optional)

     - returns: RequestBuilder<Category> 
     */
    open class func wpV2CategoriesPostWithRequestBuilder(name: String, description: String? = nil, slug: String? = nil, parent: Int? = nil, meta: String? = nil) -> RequestBuilder<Category> {
        let path = "/wp/v2/categories"
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "description": description,
            "name": name,
            "slug": slug,
            "parent": parent?.encodeToJSON(),
            "meta": meta
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Category>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2CommentsGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**
     * enum for parameter order
     */
    public enum Order_wpV2CommentsGet: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter orderby
     */
    public enum Orderby_wpV2CommentsGet: String { 
        case date = "date"
        case dateGmt = "date_gmt"
        case id = "id"
        case include = "include"
        case post = "post"
        case parent = "parent"
        case type = "type"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to comments published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to comments assigned to specific user IDs. Requires authorisation. (optional)
     - parameter authorExclude: (query) Ensure result set excludes comments assigned to specific user IDs. Requires authorisation. (optional)
     - parameter authorEmail: (query) Limit result set to that from a specific author email. Requires authorisation. (optional)
     - parameter before: (query) Limit response to comments published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date_gmt)
     - parameter parent: (query) Limit result set to comments of specific parent IDs. (optional)
     - parameter parentExclude: (query) Ensure result set excludes specific parent IDs. (optional)
     - parameter post: (query) Limit result set to comments assigned to specific post IDs. (optional)
     - parameter status: (query) Limit result set to comments assigned a specific status. Requires authorisation. (optional, default to approve)
     - parameter type: (query) Limit result set to comments assigned a specific type. Requires authorisation. (optional, default to comment)
     - parameter password: (query) The password for the post if it is password protected. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CommentsGet(context: Context_wpV2CommentsGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, authorEmail: String? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2CommentsGet? = nil, orderby: Orderby_wpV2CommentsGet? = nil, parent: [String]? = nil, parentExclude: [String]? = nil, post: [String]? = nil, status: String? = nil, type: String? = nil, password: String? = nil, completion: @escaping ((_ data: [Comment]?,_ error: Error?) -> Void)) {
        wpV2CommentsGetWithRequestBuilder(context: context, page: page, perPage: perPage, search: search, after: after, author: author, authorExclude: authorExclude, authorEmail: authorEmail, before: before, exclude: exclude, include: include, offset: offset, order: order, orderby: orderby, parent: parent, parentExclude: parentExclude, post: post, status: status, type: type, password: password).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/comments
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "author_name" : "author_name",
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "author_user_agent" : "author_user_agent",
  "author" : 6,
  "author_ip" : "author_ip",
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "content" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "author_url" : "http://example.com/aeiou",
  "post" : 5,
  "author_avatar_urls" : {
    "24" : "http://example.com/aeiou",
    "48" : "http://example.com/aeiou",
    "96" : "http://example.com/aeiou"
  },
  "meta" : "{}",
  "author_email" : "author_email",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}, {
  "author_name" : "author_name",
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "author_user_agent" : "author_user_agent",
  "author" : 6,
  "author_ip" : "author_ip",
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "content" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "author_url" : "http://example.com/aeiou",
  "post" : 5,
  "author_avatar_urls" : {
    "24" : "http://example.com/aeiou",
    "48" : "http://example.com/aeiou",
    "96" : "http://example.com/aeiou"
  },
  "meta" : "{}",
  "author_email" : "author_email",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to comments published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to comments assigned to specific user IDs. Requires authorisation. (optional)
     - parameter authorExclude: (query) Ensure result set excludes comments assigned to specific user IDs. Requires authorisation. (optional)
     - parameter authorEmail: (query) Limit result set to that from a specific author email. Requires authorisation. (optional)
     - parameter before: (query) Limit response to comments published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date_gmt)
     - parameter parent: (query) Limit result set to comments of specific parent IDs. (optional)
     - parameter parentExclude: (query) Ensure result set excludes specific parent IDs. (optional)
     - parameter post: (query) Limit result set to comments assigned to specific post IDs. (optional)
     - parameter status: (query) Limit result set to comments assigned a specific status. Requires authorisation. (optional, default to approve)
     - parameter type: (query) Limit result set to comments assigned a specific type. Requires authorisation. (optional, default to comment)
     - parameter password: (query) The password for the post if it is password protected. (optional)

     - returns: RequestBuilder<[Comment]> 
     */
    open class func wpV2CommentsGetWithRequestBuilder(context: Context_wpV2CommentsGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, authorEmail: String? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2CommentsGet? = nil, orderby: Orderby_wpV2CommentsGet? = nil, parent: [String]? = nil, parentExclude: [String]? = nil, post: [String]? = nil, status: String? = nil, type: String? = nil, password: String? = nil) -> RequestBuilder<[Comment]> {
        let path = "/wp/v2/comments"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "search": search, 
            "after": after?.encodeToJSON(), 
            "author": author, 
            "author_exclude": authorExclude, 
            "author_email": authorEmail, 
            "before": before?.encodeToJSON(), 
            "exclude": exclude, 
            "include": include, 
            "offset": offset?.encodeToJSON(), 
            "order": order?.rawValue, 
            "orderby": orderby?.rawValue, 
            "parent": parent, 
            "parent_exclude": parentExclude, 
            "post": post, 
            "status": status, 
            "type": type, 
            "password": password
        ])
        

        let requestBuilder: RequestBuilder<[Comment]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)
     - parameter password: (query) The password for the post if it is password protected. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CommentsIdDelete(id: String, id2: Int? = nil, force: Bool? = nil, password: String? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        wpV2CommentsIdDeleteWithRequestBuilder(id: id, id2: id2, force: force, password: password).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/comments/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "author_name" : "author_name",
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "author_user_agent" : "author_user_agent",
  "author" : 6,
  "author_ip" : "author_ip",
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "content" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "author_url" : "http://example.com/aeiou",
  "post" : 5,
  "author_avatar_urls" : {
    "24" : "http://example.com/aeiou",
    "48" : "http://example.com/aeiou",
    "96" : "http://example.com/aeiou"
  },
  "meta" : "{}",
  "author_email" : "author_email",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)
     - parameter password: (query) The password for the post if it is password protected. (optional)

     - returns: RequestBuilder<Comment> 
     */
    open class func wpV2CommentsIdDeleteWithRequestBuilder(id: String, id2: Int? = nil, force: Bool? = nil, password: String? = nil) -> RequestBuilder<Comment> {
        var path = "/wp/v2/comments/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "force": force, 
            "password": password
        ])
        

        let requestBuilder: RequestBuilder<Comment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2CommentsIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter password: (query) The password for the post if it is password protected. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CommentsIdGet(id: String, id2: Int? = nil, context: Context_wpV2CommentsIdGet? = nil, password: String? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        wpV2CommentsIdGetWithRequestBuilder(id: id, id2: id2, context: context, password: password).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/comments/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "author_name" : "author_name",
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "author_user_agent" : "author_user_agent",
  "author" : 6,
  "author_ip" : "author_ip",
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "content" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "author_url" : "http://example.com/aeiou",
  "post" : 5,
  "author_avatar_urls" : {
    "24" : "http://example.com/aeiou",
    "48" : "http://example.com/aeiou",
    "96" : "http://example.com/aeiou"
  },
  "meta" : "{}",
  "author_email" : "author_email",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter password: (query) The password for the post if it is password protected. (optional)

     - returns: RequestBuilder<Comment> 
     */
    open class func wpV2CommentsIdGetWithRequestBuilder(id: String, id2: Int? = nil, context: Context_wpV2CommentsIdGet? = nil, password: String? = nil) -> RequestBuilder<Comment> {
        var path = "/wp/v2/comments/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue, 
            "password": password
        ])
        

        let requestBuilder: RequestBuilder<Comment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter author: (form) The ID of the user object, if author was a user. (optional)
     - parameter authorEmail: (form) Email address for the object author. (optional)
     - parameter authorIp: (form) IP address for the object author. (optional)
     - parameter authorName: (form) Display name for the object author. (optional)
     - parameter authorUrl: (form) URL for the object author. (optional)
     - parameter authorUserAgent: (form) User agent for the object author. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter post: (form) The ID of the associated post object. (optional)
     - parameter status: (form) State of the object. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CommentsIdPost(id: String, id2: Int? = nil, author: Int? = nil, authorEmail: String? = nil, authorIp: String? = nil, authorName: String? = nil, authorUrl: String? = nil, authorUserAgent: String? = nil, content: String? = nil, date: Date? = nil, dateGmt: Date? = nil, parent: Int? = nil, post: Int? = nil, status: String? = nil, meta: String? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        wpV2CommentsIdPostWithRequestBuilder(id: id, id2: id2, author: author, authorEmail: authorEmail, authorIp: authorIp, authorName: authorName, authorUrl: authorUrl, authorUserAgent: authorUserAgent, content: content, date: date, dateGmt: dateGmt, parent: parent, post: post, status: status, meta: meta).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/comments/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "author_name" : "author_name",
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "author_user_agent" : "author_user_agent",
  "author" : 6,
  "author_ip" : "author_ip",
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "content" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "author_url" : "http://example.com/aeiou",
  "post" : 5,
  "author_avatar_urls" : {
    "24" : "http://example.com/aeiou",
    "48" : "http://example.com/aeiou",
    "96" : "http://example.com/aeiou"
  },
  "meta" : "{}",
  "author_email" : "author_email",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}}]
     
     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter author: (form) The ID of the user object, if author was a user. (optional)
     - parameter authorEmail: (form) Email address for the object author. (optional)
     - parameter authorIp: (form) IP address for the object author. (optional)
     - parameter authorName: (form) Display name for the object author. (optional)
     - parameter authorUrl: (form) URL for the object author. (optional)
     - parameter authorUserAgent: (form) User agent for the object author. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter post: (form) The ID of the associated post object. (optional)
     - parameter status: (form) State of the object. (optional)
     - parameter meta: (form) Meta fields. (optional)

     - returns: RequestBuilder<Comment> 
     */
    open class func wpV2CommentsIdPostWithRequestBuilder(id: String, id2: Int? = nil, author: Int? = nil, authorEmail: String? = nil, authorIp: String? = nil, authorName: String? = nil, authorUrl: String? = nil, authorUserAgent: String? = nil, content: String? = nil, date: Date? = nil, dateGmt: Date? = nil, parent: Int? = nil, post: Int? = nil, status: String? = nil, meta: String? = nil) -> RequestBuilder<Comment> {
        var path = "/wp/v2/comments/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id2?.encodeToJSON(),
            "author": author?.encodeToJSON(),
            "author_email": authorEmail,
            "author_ip": authorIp,
            "author_name": authorName,
            "author_url": authorUrl,
            "author_user_agent": authorUserAgent,
            "content": content,
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "parent": parent?.encodeToJSON(),
            "post": post?.encodeToJSON(),
            "status": status,
            "meta": meta
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Comment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter author: (form) The ID of the user object, if author was a user. (optional)
     - parameter authorEmail: (form) Email address for the object author. (optional)
     - parameter authorIp: (form) IP address for the object author. (optional)
     - parameter authorName: (form) Display name for the object author. (optional)
     - parameter authorUrl: (form) URL for the object author. (optional)
     - parameter authorUserAgent: (form) User agent for the object author. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter post: (form) The ID of the associated post object. (optional)
     - parameter status: (form) State of the object. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2CommentsPost(author: Int? = nil, authorEmail: String? = nil, authorIp: String? = nil, authorName: String? = nil, authorUrl: String? = nil, authorUserAgent: String? = nil, content: String? = nil, date: Date? = nil, dateGmt: Date? = nil, parent: Int? = nil, post: Int? = nil, status: String? = nil, meta: String? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        wpV2CommentsPostWithRequestBuilder(author: author, authorEmail: authorEmail, authorIp: authorIp, authorName: authorName, authorUrl: authorUrl, authorUserAgent: authorUserAgent, content: content, date: date, dateGmt: dateGmt, parent: parent, post: post, status: status, meta: meta).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/comments
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "author_name" : "author_name",
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "author_user_agent" : "author_user_agent",
  "author" : 6,
  "author_ip" : "author_ip",
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "content" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "author_url" : "http://example.com/aeiou",
  "post" : 5,
  "author_avatar_urls" : {
    "24" : "http://example.com/aeiou",
    "48" : "http://example.com/aeiou",
    "96" : "http://example.com/aeiou"
  },
  "meta" : "{}",
  "author_email" : "author_email",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}}]
     
     - parameter author: (form) The ID of the user object, if author was a user. (optional)
     - parameter authorEmail: (form) Email address for the object author. (optional)
     - parameter authorIp: (form) IP address for the object author. (optional)
     - parameter authorName: (form) Display name for the object author. (optional)
     - parameter authorUrl: (form) URL for the object author. (optional)
     - parameter authorUserAgent: (form) User agent for the object author. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter post: (form) The ID of the associated post object. (optional)
     - parameter status: (form) State of the object. (optional)
     - parameter meta: (form) Meta fields. (optional)

     - returns: RequestBuilder<Comment> 
     */
    open class func wpV2CommentsPostWithRequestBuilder(author: Int? = nil, authorEmail: String? = nil, authorIp: String? = nil, authorName: String? = nil, authorUrl: String? = nil, authorUserAgent: String? = nil, content: String? = nil, date: Date? = nil, dateGmt: Date? = nil, parent: Int? = nil, post: Int? = nil, status: String? = nil, meta: String? = nil) -> RequestBuilder<Comment> {
        let path = "/wp/v2/comments"
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "author": author?.encodeToJSON(),
            "author_email": authorEmail,
            "author_ip": authorIp,
            "author_name": authorName,
            "author_url": authorUrl,
            "author_user_agent": authorUserAgent,
            "content": content,
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "parent": parent?.encodeToJSON(),
            "post": post?.encodeToJSON(),
            "status": status,
            "meta": meta
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Comment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2MediaGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**
     * enum for parameter order
     */
    public enum Order_wpV2MediaGet: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter orderby
     */
    public enum Orderby_wpV2MediaGet: String { 
        case date = "date"
        case relevance = "relevance"
        case id = "id"
        case include = "include"
        case title = "title"
        case slug = "slug"
    }

    /**
     * enum for parameter mediaType
     */
    public enum MediaType_wpV2MediaGet: String { 
        case image = "image"
        case video = "video"
        case text = "text"
        case application = "application"
        case audio = "audio"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to posts published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to posts assigned to specific authors. (optional)
     - parameter authorExclude: (query) Ensure result set excludes posts assigned to specific authors. (optional)
     - parameter before: (query) Limit response to posts published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date)
     - parameter parent: (query) Limit result set to those of particular parent IDs. (optional)
     - parameter parentExclude: (query) Limit result set to all items except those of a particular parent ID. (optional)
     - parameter slug: (query) Limit result set to posts with one or more specific slugs. (optional)
     - parameter status: (query) Limit result set to posts assigned one or more statuses. (optional, default to inherit)
     - parameter mediaType: (query) Limit result set to attachments of a particular media type. (optional)
     - parameter mimeType: (query) Limit result set to attachments of a particular MIME type. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2MediaGet(context: Context_wpV2MediaGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2MediaGet? = nil, orderby: Orderby_wpV2MediaGet? = nil, parent: [String]? = nil, parentExclude: [String]? = nil, slug: [String]? = nil, status: [String]? = nil, mediaType: MediaType_wpV2MediaGet? = nil, mimeType: String? = nil, completion: @escaping ((_ data: [Attachment]?,_ error: Error?) -> Void)) {
        wpV2MediaGetWithRequestBuilder(context: context, page: page, perPage: perPage, search: search, after: after, author: author, authorExclude: authorExclude, before: before, exclude: exclude, include: include, offset: offset, order: order, orderby: orderby, parent: parent, parentExclude: parentExclude, slug: slug, status: status, mediaType: mediaType, mimeType: mimeType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/media
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "caption" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "description" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "media_details" : "{}",
  "comment_status" : "open",
  "source_url" : "http://example.com/aeiou",
  "ping_status" : "open",
  "post" : 1,
  "alt_text" : "alt_text",
  "media_type" : "image",
  "mime_type" : "mime_type",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "caption" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "description" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "media_details" : "{}",
  "comment_status" : "open",
  "source_url" : "http://example.com/aeiou",
  "ping_status" : "open",
  "post" : 1,
  "alt_text" : "alt_text",
  "media_type" : "image",
  "mime_type" : "mime_type",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to posts published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to posts assigned to specific authors. (optional)
     - parameter authorExclude: (query) Ensure result set excludes posts assigned to specific authors. (optional)
     - parameter before: (query) Limit response to posts published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date)
     - parameter parent: (query) Limit result set to those of particular parent IDs. (optional)
     - parameter parentExclude: (query) Limit result set to all items except those of a particular parent ID. (optional)
     - parameter slug: (query) Limit result set to posts with one or more specific slugs. (optional)
     - parameter status: (query) Limit result set to posts assigned one or more statuses. (optional, default to inherit)
     - parameter mediaType: (query) Limit result set to attachments of a particular media type. (optional)
     - parameter mimeType: (query) Limit result set to attachments of a particular MIME type. (optional)

     - returns: RequestBuilder<[Attachment]> 
     */
    open class func wpV2MediaGetWithRequestBuilder(context: Context_wpV2MediaGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2MediaGet? = nil, orderby: Orderby_wpV2MediaGet? = nil, parent: [String]? = nil, parentExclude: [String]? = nil, slug: [String]? = nil, status: [String]? = nil, mediaType: MediaType_wpV2MediaGet? = nil, mimeType: String? = nil) -> RequestBuilder<[Attachment]> {
        let path = "/wp/v2/media"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "search": search, 
            "after": after?.encodeToJSON(), 
            "author": author, 
            "author_exclude": authorExclude, 
            "before": before?.encodeToJSON(), 
            "exclude": exclude, 
            "include": include, 
            "offset": offset?.encodeToJSON(), 
            "order": order?.rawValue, 
            "orderby": orderby?.rawValue, 
            "parent": parent, 
            "parent_exclude": parentExclude, 
            "slug": slug, 
            "status": status, 
            "media_type": mediaType?.rawValue, 
            "mime_type": mimeType
        ])
        

        let requestBuilder: RequestBuilder<[Attachment]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2MediaIdDelete(id: String, id2: Int? = nil, force: Bool? = nil, completion: @escaping ((_ data: Attachment?,_ error: Error?) -> Void)) {
        wpV2MediaIdDeleteWithRequestBuilder(id: id, id2: id2, force: force).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/media/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "caption" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "description" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "media_details" : "{}",
  "comment_status" : "open",
  "source_url" : "http://example.com/aeiou",
  "ping_status" : "open",
  "post" : 1,
  "alt_text" : "alt_text",
  "media_type" : "image",
  "mime_type" : "mime_type",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)

     - returns: RequestBuilder<Attachment> 
     */
    open class func wpV2MediaIdDeleteWithRequestBuilder(id: String, id2: Int? = nil, force: Bool? = nil) -> RequestBuilder<Attachment> {
        var path = "/wp/v2/media/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "force": force
        ])
        

        let requestBuilder: RequestBuilder<Attachment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2MediaIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2MediaIdGet(id: String, id2: Int? = nil, context: Context_wpV2MediaIdGet? = nil, completion: @escaping ((_ data: Attachment?,_ error: Error?) -> Void)) {
        wpV2MediaIdGetWithRequestBuilder(id: id, id2: id2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/media/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "caption" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "description" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "media_details" : "{}",
  "comment_status" : "open",
  "source_url" : "http://example.com/aeiou",
  "ping_status" : "open",
  "post" : 1,
  "alt_text" : "alt_text",
  "media_type" : "image",
  "mime_type" : "mime_type",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<Attachment> 
     */
    open class func wpV2MediaIdGetWithRequestBuilder(id: String, id2: Int? = nil, context: Context_wpV2MediaIdGet? = nil) -> RequestBuilder<Attachment> {
        var path = "/wp/v2/media/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<Attachment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_wpV2MediaIdPost: String { 
        case publish = "publish"
        case future = "future"
        case draft = "draft"
        case pending = "pending"
        case _private = "private"
    }

    /**
     * enum for parameter commentStatus
     */
    public enum CommentStatus_wpV2MediaIdPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter pingStatus
     */
    public enum PingStatus_wpV2MediaIdPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter template
     */
    public enum Template_wpV2MediaIdPost: String { 
        case empty = ""
    }

    /**

     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter altText: (form) Alternative text to display when attachment is not displayed. (optional)
     - parameter caption: (form) The attachment caption. (optional)
     - parameter description: (form) The attachment description. (optional)
     - parameter post: (form) The ID for the associated post of the attachment. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2MediaIdPost(id: String, id2: Int? = nil, date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2MediaIdPost? = nil, title: String? = nil, author: Int? = nil, commentStatus: CommentStatus_wpV2MediaIdPost? = nil, pingStatus: PingStatus_wpV2MediaIdPost? = nil, meta: String? = nil, template: Template_wpV2MediaIdPost? = nil, altText: String? = nil, caption: String? = nil, description: String? = nil, post: Int? = nil, completion: @escaping ((_ data: Attachment?,_ error: Error?) -> Void)) {
        wpV2MediaIdPostWithRequestBuilder(id: id, id2: id2, date: date, dateGmt: dateGmt, slug: slug, status: status, title: title, author: author, commentStatus: commentStatus, pingStatus: pingStatus, meta: meta, template: template, altText: altText, caption: caption, description: description, post: post).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/media/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "caption" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "description" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "media_details" : "{}",
  "comment_status" : "open",
  "source_url" : "http://example.com/aeiou",
  "ping_status" : "open",
  "post" : 1,
  "alt_text" : "alt_text",
  "media_type" : "image",
  "mime_type" : "mime_type",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter altText: (form) Alternative text to display when attachment is not displayed. (optional)
     - parameter caption: (form) The attachment caption. (optional)
     - parameter description: (form) The attachment description. (optional)
     - parameter post: (form) The ID for the associated post of the attachment. (optional)

     - returns: RequestBuilder<Attachment> 
     */
    open class func wpV2MediaIdPostWithRequestBuilder(id: String, id2: Int? = nil, date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2MediaIdPost? = nil, title: String? = nil, author: Int? = nil, commentStatus: CommentStatus_wpV2MediaIdPost? = nil, pingStatus: PingStatus_wpV2MediaIdPost? = nil, meta: String? = nil, template: Template_wpV2MediaIdPost? = nil, altText: String? = nil, caption: String? = nil, description: String? = nil, post: Int? = nil) -> RequestBuilder<Attachment> {
        var path = "/wp/v2/media/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id2?.encodeToJSON(),
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "slug": slug,
            "status": status?.rawValue,
            "title": title,
            "author": author?.encodeToJSON(),
            "comment_status": commentStatus?.rawValue,
            "ping_status": pingStatus?.rawValue,
            "meta": meta,
            "template": template?.rawValue,
            "alt_text": altText,
            "caption": caption,
            "description": description,
            "post": post?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Attachment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_wpV2MediaPost: String { 
        case publish = "publish"
        case future = "future"
        case draft = "draft"
        case pending = "pending"
        case _private = "private"
    }

    /**
     * enum for parameter commentStatus
     */
    public enum CommentStatus_wpV2MediaPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter pingStatus
     */
    public enum PingStatus_wpV2MediaPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter template
     */
    public enum Template_wpV2MediaPost: String { 
        case empty = ""
    }

    /**

     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter altText: (form) Alternative text to display when attachment is not displayed. (optional)
     - parameter caption: (form) The attachment caption. (optional)
     - parameter description: (form) The attachment description. (optional)
     - parameter post: (form) The ID for the associated post of the attachment. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2MediaPost(date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2MediaPost? = nil, title: String? = nil, author: Int? = nil, commentStatus: CommentStatus_wpV2MediaPost? = nil, pingStatus: PingStatus_wpV2MediaPost? = nil, meta: String? = nil, template: Template_wpV2MediaPost? = nil, altText: String? = nil, caption: String? = nil, description: String? = nil, post: Int? = nil, completion: @escaping ((_ data: Attachment?,_ error: Error?) -> Void)) {
        wpV2MediaPostWithRequestBuilder(date: date, dateGmt: dateGmt, slug: slug, status: status, title: title, author: author, commentStatus: commentStatus, pingStatus: pingStatus, meta: meta, template: template, altText: altText, caption: caption, description: description, post: post).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/media
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "caption" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "description" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "media_details" : "{}",
  "comment_status" : "open",
  "source_url" : "http://example.com/aeiou",
  "ping_status" : "open",
  "post" : 1,
  "alt_text" : "alt_text",
  "media_type" : "image",
  "mime_type" : "mime_type",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter altText: (form) Alternative text to display when attachment is not displayed. (optional)
     - parameter caption: (form) The attachment caption. (optional)
     - parameter description: (form) The attachment description. (optional)
     - parameter post: (form) The ID for the associated post of the attachment. (optional)

     - returns: RequestBuilder<Attachment> 
     */
    open class func wpV2MediaPostWithRequestBuilder(date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2MediaPost? = nil, title: String? = nil, author: Int? = nil, commentStatus: CommentStatus_wpV2MediaPost? = nil, pingStatus: PingStatus_wpV2MediaPost? = nil, meta: String? = nil, template: Template_wpV2MediaPost? = nil, altText: String? = nil, caption: String? = nil, description: String? = nil, post: Int? = nil) -> RequestBuilder<Attachment> {
        let path = "/wp/v2/media"
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "slug": slug,
            "status": status?.rawValue,
            "title": title,
            "author": author?.encodeToJSON(),
            "comment_status": commentStatus?.rawValue,
            "ping_status": pingStatus?.rawValue,
            "meta": meta,
            "template": template?.rawValue,
            "alt_text": altText,
            "caption": caption,
            "description": description,
            "post": post?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Attachment>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PagesGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**
     * enum for parameter order
     */
    public enum Order_wpV2PagesGet: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter orderby
     */
    public enum Orderby_wpV2PagesGet: String { 
        case date = "date"
        case relevance = "relevance"
        case id = "id"
        case include = "include"
        case title = "title"
        case slug = "slug"
        case menuOrder = "menu_order"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to posts published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to posts assigned to specific authors. (optional)
     - parameter authorExclude: (query) Ensure result set excludes posts assigned to specific authors. (optional)
     - parameter before: (query) Limit response to posts published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter menuOrder: (query) Limit result set to posts with a specific menu_order value. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date)
     - parameter parent: (query) Limit result set to those of particular parent IDs. (optional)
     - parameter parentExclude: (query) Limit result set to all items except those of a particular parent ID. (optional)
     - parameter slug: (query) Limit result set to posts with one or more specific slugs. (optional)
     - parameter status: (query) Limit result set to posts assigned one or more statuses. (optional, default to publish)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesGet(context: Context_wpV2PagesGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, menuOrder: Int? = nil, offset: Int? = nil, order: Order_wpV2PagesGet? = nil, orderby: Orderby_wpV2PagesGet? = nil, parent: [String]? = nil, parentExclude: [String]? = nil, slug: [String]? = nil, status: [String]? = nil, completion: @escaping ((_ data: [Page]?,_ error: Error?) -> Void)) {
        wpV2PagesGetWithRequestBuilder(context: context, page: page, perPage: perPage, search: search, after: after, author: author, authorExclude: authorExclude, before: before, exclude: exclude, include: include, menuOrder: menuOrder, offset: offset, order: order, orderby: orderby, parent: parent, parentExclude: parentExclude, slug: slug, status: status).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/pages
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "parent" : 6,
  "menu_order" : 5,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 1,
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 5,
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "parent" : 6,
  "menu_order" : 5,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 1,
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 5,
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to posts published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to posts assigned to specific authors. (optional)
     - parameter authorExclude: (query) Ensure result set excludes posts assigned to specific authors. (optional)
     - parameter before: (query) Limit response to posts published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter menuOrder: (query) Limit result set to posts with a specific menu_order value. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date)
     - parameter parent: (query) Limit result set to those of particular parent IDs. (optional)
     - parameter parentExclude: (query) Limit result set to all items except those of a particular parent ID. (optional)
     - parameter slug: (query) Limit result set to posts with one or more specific slugs. (optional)
     - parameter status: (query) Limit result set to posts assigned one or more statuses. (optional, default to publish)

     - returns: RequestBuilder<[Page]> 
     */
    open class func wpV2PagesGetWithRequestBuilder(context: Context_wpV2PagesGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, menuOrder: Int? = nil, offset: Int? = nil, order: Order_wpV2PagesGet? = nil, orderby: Orderby_wpV2PagesGet? = nil, parent: [String]? = nil, parentExclude: [String]? = nil, slug: [String]? = nil, status: [String]? = nil) -> RequestBuilder<[Page]> {
        let path = "/wp/v2/pages"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "search": search, 
            "after": after?.encodeToJSON(), 
            "author": author, 
            "author_exclude": authorExclude, 
            "before": before?.encodeToJSON(), 
            "exclude": exclude, 
            "include": include, 
            "menu_order": menuOrder?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "order": order?.rawValue, 
            "orderby": orderby?.rawValue, 
            "parent": parent, 
            "parent_exclude": parentExclude, 
            "slug": slug, 
            "status": status
        ])
        

        let requestBuilder: RequestBuilder<[Page]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesIdDelete(id: String, id2: Int? = nil, force: Bool? = nil, completion: @escaping ((_ data: Page?,_ error: Error?) -> Void)) {
        wpV2PagesIdDeleteWithRequestBuilder(id: id, id2: id2, force: force).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/pages/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "parent" : 6,
  "menu_order" : 5,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 1,
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 5,
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)

     - returns: RequestBuilder<Page> 
     */
    open class func wpV2PagesIdDeleteWithRequestBuilder(id: String, id2: Int? = nil, force: Bool? = nil) -> RequestBuilder<Page> {
        var path = "/wp/v2/pages/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "force": force
        ])
        

        let requestBuilder: RequestBuilder<Page>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PagesIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter password: (query) The password for the post if it is password protected. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesIdGet(id: String, id2: Int? = nil, context: Context_wpV2PagesIdGet? = nil, password: String? = nil, completion: @escaping ((_ data: Page?,_ error: Error?) -> Void)) {
        wpV2PagesIdGetWithRequestBuilder(id: id, id2: id2, context: context, password: password).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/pages/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "parent" : 6,
  "menu_order" : 5,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 1,
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 5,
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter password: (query) The password for the post if it is password protected. (optional)

     - returns: RequestBuilder<Page> 
     */
    open class func wpV2PagesIdGetWithRequestBuilder(id: String, id2: Int? = nil, context: Context_wpV2PagesIdGet? = nil, password: String? = nil) -> RequestBuilder<Page> {
        var path = "/wp/v2/pages/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue, 
            "password": password
        ])
        

        let requestBuilder: RequestBuilder<Page>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_wpV2PagesIdPost: String { 
        case publish = "publish"
        case future = "future"
        case draft = "draft"
        case pending = "pending"
        case _private = "private"
    }

    /**
     * enum for parameter commentStatus
     */
    public enum CommentStatus_wpV2PagesIdPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter pingStatus
     */
    public enum PingStatus_wpV2PagesIdPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter template
     */
    public enum Template_wpV2PagesIdPost: String { 
        case empty = ""
    }

    /**

     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter menuOrder: (form) The order of the object in relation to other objects of its type. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesIdPost(id: String, id2: Int? = nil, date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PagesIdPost? = nil, password: String? = nil, parent: Int? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PagesIdPost? = nil, pingStatus: PingStatus_wpV2PagesIdPost? = nil, menuOrder: Int? = nil, meta: String? = nil, template: Template_wpV2PagesIdPost? = nil, completion: @escaping ((_ data: Page?,_ error: Error?) -> Void)) {
        wpV2PagesIdPostWithRequestBuilder(id: id, id2: id2, date: date, dateGmt: dateGmt, slug: slug, status: status, password: password, parent: parent, title: title, content: content, author: author, excerpt: excerpt, featuredMedia: featuredMedia, commentStatus: commentStatus, pingStatus: pingStatus, menuOrder: menuOrder, meta: meta, template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/pages/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "parent" : 6,
  "menu_order" : 5,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 1,
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 5,
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter menuOrder: (form) The order of the object in relation to other objects of its type. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)

     - returns: RequestBuilder<Page> 
     */
    open class func wpV2PagesIdPostWithRequestBuilder(id: String, id2: Int? = nil, date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PagesIdPost? = nil, password: String? = nil, parent: Int? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PagesIdPost? = nil, pingStatus: PingStatus_wpV2PagesIdPost? = nil, menuOrder: Int? = nil, meta: String? = nil, template: Template_wpV2PagesIdPost? = nil) -> RequestBuilder<Page> {
        var path = "/wp/v2/pages/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id2?.encodeToJSON(),
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "slug": slug,
            "status": status?.rawValue,
            "password": password,
            "parent": parent?.encodeToJSON(),
            "title": title,
            "content": content,
            "author": author?.encodeToJSON(),
            "excerpt": excerpt,
            "featured_media": featuredMedia?.encodeToJSON(),
            "comment_status": commentStatus?.rawValue,
            "ping_status": pingStatus?.rawValue,
            "menu_order": menuOrder?.encodeToJSON(),
            "meta": meta,
            "template": template?.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Page>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PagesParentRevisionsGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter parent: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesParentRevisionsGet(parent: String, parent2: Int? = nil, context: Context_wpV2PagesParentRevisionsGet? = nil, completion: @escaping ((_ data: [PageRevision]?,_ error: Error?) -> Void)) {
        wpV2PagesParentRevisionsGetWithRequestBuilder(parent: parent, parent2: parent2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/pages/{parent}/revisions
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
} ]}]
     
     - parameter parent: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<[PageRevision]> 
     */
    open class func wpV2PagesParentRevisionsGetWithRequestBuilder(parent: String, parent2: Int? = nil, context: Context_wpV2PagesParentRevisionsGet? = nil) -> RequestBuilder<[PageRevision]> {
        var path = "/wp/v2/pages/{parent}/revisions"
        path = path.replacingOccurrences(of: "{parent}", with: "\(parent)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "parent": parent2?.encodeToJSON(), 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[PageRevision]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Required to be true, as revisions do not support binning. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesParentRevisionsIdDelete(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, force: Bool? = nil, completion: @escaping ((_ data: PageRevision?,_ error: Error?) -> Void)) {
        wpV2PagesParentRevisionsIdDeleteWithRequestBuilder(parent: parent, id: id, parent2: parent2, id2: id2, force: force).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/pages/{parent}/revisions/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
}}]
     
     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Required to be true, as revisions do not support binning. (optional)

     - returns: RequestBuilder<PageRevision> 
     */
    open class func wpV2PagesParentRevisionsIdDeleteWithRequestBuilder(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, force: Bool? = nil) -> RequestBuilder<PageRevision> {
        var path = "/wp/v2/pages/{parent}/revisions/{id}"
        path = path.replacingOccurrences(of: "{parent}", with: "\(parent)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "parent": parent2?.encodeToJSON(), 
            "id": id2?.encodeToJSON(), 
            "force": force
        ])
        

        let requestBuilder: RequestBuilder<PageRevision>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PagesParentRevisionsIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesParentRevisionsIdGet(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, context: Context_wpV2PagesParentRevisionsIdGet? = nil, completion: @escaping ((_ data: PageRevision?,_ error: Error?) -> Void)) {
        wpV2PagesParentRevisionsIdGetWithRequestBuilder(parent: parent, id: id, parent2: parent2, id2: id2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/pages/{parent}/revisions/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
}}]
     
     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<PageRevision> 
     */
    open class func wpV2PagesParentRevisionsIdGetWithRequestBuilder(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, context: Context_wpV2PagesParentRevisionsIdGet? = nil) -> RequestBuilder<PageRevision> {
        var path = "/wp/v2/pages/{parent}/revisions/{id}"
        path = path.replacingOccurrences(of: "{parent}", with: "\(parent)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "parent": parent2?.encodeToJSON(), 
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<PageRevision>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_wpV2PagesPost: String { 
        case publish = "publish"
        case future = "future"
        case draft = "draft"
        case pending = "pending"
        case _private = "private"
    }

    /**
     * enum for parameter commentStatus
     */
    public enum CommentStatus_wpV2PagesPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter pingStatus
     */
    public enum PingStatus_wpV2PagesPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter template
     */
    public enum Template_wpV2PagesPost: String { 
        case empty = ""
    }

    /**

     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter menuOrder: (form) The order of the object in relation to other objects of its type. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PagesPost(date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PagesPost? = nil, password: String? = nil, parent: Int? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PagesPost? = nil, pingStatus: PingStatus_wpV2PagesPost? = nil, menuOrder: Int? = nil, meta: String? = nil, template: Template_wpV2PagesPost? = nil, completion: @escaping ((_ data: Page?,_ error: Error?) -> Void)) {
        wpV2PagesPostWithRequestBuilder(date: date, dateGmt: dateGmt, slug: slug, status: status, password: password, parent: parent, title: title, content: content, author: author, excerpt: excerpt, featuredMedia: featuredMedia, commentStatus: commentStatus, pingStatus: pingStatus, menuOrder: menuOrder, meta: meta, template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/pages
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "parent" : 6,
  "menu_order" : 5,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 1,
  "link" : "http://example.com/aeiou",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 5,
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter parent: (form) The ID for the parent of the object. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter menuOrder: (form) The order of the object in relation to other objects of its type. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)

     - returns: RequestBuilder<Page> 
     */
    open class func wpV2PagesPostWithRequestBuilder(date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PagesPost? = nil, password: String? = nil, parent: Int? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PagesPost? = nil, pingStatus: PingStatus_wpV2PagesPost? = nil, menuOrder: Int? = nil, meta: String? = nil, template: Template_wpV2PagesPost? = nil) -> RequestBuilder<Page> {
        let path = "/wp/v2/pages"
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "slug": slug,
            "status": status?.rawValue,
            "password": password,
            "parent": parent?.encodeToJSON(),
            "title": title,
            "content": content,
            "author": author?.encodeToJSON(),
            "excerpt": excerpt,
            "featured_media": featuredMedia?.encodeToJSON(),
            "comment_status": commentStatus?.rawValue,
            "ping_status": pingStatus?.rawValue,
            "menu_order": menuOrder?.encodeToJSON(),
            "meta": meta,
            "template": template?.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Page>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PostsGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**
     * enum for parameter order
     */
    public enum Order_wpV2PostsGet: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter orderby
     */
    public enum Orderby_wpV2PostsGet: String { 
        case date = "date"
        case relevance = "relevance"
        case id = "id"
        case include = "include"
        case title = "title"
        case slug = "slug"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to posts published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to posts assigned to specific authors. (optional)
     - parameter authorExclude: (query) Ensure result set excludes posts assigned to specific authors. (optional)
     - parameter before: (query) Limit response to posts published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date)
     - parameter slug: (query) Limit result set to posts with one or more specific slugs. (optional)
     - parameter status: (query) Limit result set to posts assigned one or more statuses. (optional, default to publish)
     - parameter categories: (query) Limit result set to all items that have the specified term assigned in the categories taxonomy. (optional)
     - parameter categoriesExclude: (query) Limit result set to all items except those that have the specified term assigned in the categories taxonomy. (optional)
     - parameter tags: (query) Limit result set to all items that have the specified term assigned in the tags taxonomy. (optional)
     - parameter tagsExclude: (query) Limit result set to all items except those that have the specified term assigned in the tags taxonomy. (optional)
     - parameter sticky: (query) Limit result set to items that are sticky. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsGet(context: Context_wpV2PostsGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2PostsGet? = nil, orderby: Orderby_wpV2PostsGet? = nil, slug: [String]? = nil, status: [String]? = nil, categories: [String]? = nil, categoriesExclude: [String]? = nil, tags: [String]? = nil, tagsExclude: [String]? = nil, sticky: Bool? = nil, completion: @escaping ((_ data: [Post]?,_ error: Error?) -> Void)) {
        wpV2PostsGetWithRequestBuilder(context: context, page: page, perPage: perPage, search: search, after: after, author: author, authorExclude: authorExclude, before: before, exclude: exclude, include: include, offset: offset, order: order, orderby: orderby, slug: slug, status: status, categories: categories, categoriesExclude: categoriesExclude, tags: tags, tagsExclude: tagsExclude, sticky: sticky).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/posts
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "format" : "standard",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 1,
  "tags" : [ "tags", "tags" ],
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "sticky" : true,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "categories" : [ "categories", "categories" ],
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "format" : "standard",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 1,
  "tags" : [ "tags", "tags" ],
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "sticky" : true,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "categories" : [ "categories", "categories" ],
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter after: (query) Limit response to posts published after a given ISO8601 compliant date. (optional)
     - parameter author: (query) Limit result set to posts assigned to specific authors. (optional)
     - parameter authorExclude: (query) Ensure result set excludes posts assigned to specific authors. (optional)
     - parameter before: (query) Limit response to posts published before a given ISO8601 compliant date. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to desc)
     - parameter orderby: (query) Sort collection by object attribute. (optional, default to date)
     - parameter slug: (query) Limit result set to posts with one or more specific slugs. (optional)
     - parameter status: (query) Limit result set to posts assigned one or more statuses. (optional, default to publish)
     - parameter categories: (query) Limit result set to all items that have the specified term assigned in the categories taxonomy. (optional)
     - parameter categoriesExclude: (query) Limit result set to all items except those that have the specified term assigned in the categories taxonomy. (optional)
     - parameter tags: (query) Limit result set to all items that have the specified term assigned in the tags taxonomy. (optional)
     - parameter tagsExclude: (query) Limit result set to all items except those that have the specified term assigned in the tags taxonomy. (optional)
     - parameter sticky: (query) Limit result set to items that are sticky. (optional)

     - returns: RequestBuilder<[Post]> 
     */
    open class func wpV2PostsGetWithRequestBuilder(context: Context_wpV2PostsGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, after: Date? = nil, author: [String]? = nil, authorExclude: [String]? = nil, before: Date? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2PostsGet? = nil, orderby: Orderby_wpV2PostsGet? = nil, slug: [String]? = nil, status: [String]? = nil, categories: [String]? = nil, categoriesExclude: [String]? = nil, tags: [String]? = nil, tagsExclude: [String]? = nil, sticky: Bool? = nil) -> RequestBuilder<[Post]> {
        let path = "/wp/v2/posts"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "search": search, 
            "after": after?.encodeToJSON(), 
            "author": author, 
            "author_exclude": authorExclude, 
            "before": before?.encodeToJSON(), 
            "exclude": exclude, 
            "include": include, 
            "offset": offset?.encodeToJSON(), 
            "order": order?.rawValue, 
            "orderby": orderby?.rawValue, 
            "slug": slug, 
            "status": status, 
            "categories": categories, 
            "categories_exclude": categoriesExclude, 
            "tags": tags, 
            "tags_exclude": tagsExclude, 
            "sticky": sticky
        ])
        

        let requestBuilder: RequestBuilder<[Post]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsIdDelete(id: String, id2: Int? = nil, force: Bool? = nil, completion: @escaping ((_ data: Post?,_ error: Error?) -> Void)) {
        wpV2PostsIdDeleteWithRequestBuilder(id: id, id2: id2, force: force).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/posts/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "format" : "standard",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 1,
  "tags" : [ "tags", "tags" ],
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "sticky" : true,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "categories" : [ "categories", "categories" ],
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Whether to bypass bin and force deletion. (optional)

     - returns: RequestBuilder<Post> 
     */
    open class func wpV2PostsIdDeleteWithRequestBuilder(id: String, id2: Int? = nil, force: Bool? = nil) -> RequestBuilder<Post> {
        var path = "/wp/v2/posts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "force": force
        ])
        

        let requestBuilder: RequestBuilder<Post>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PostsIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter password: (query) The password for the post if it is password protected. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsIdGet(id: String, id2: Int? = nil, context: Context_wpV2PostsIdGet? = nil, password: String? = nil, completion: @escaping ((_ data: Post?,_ error: Error?) -> Void)) {
        wpV2PostsIdGetWithRequestBuilder(id: id, id2: id2, context: context, password: password).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/posts/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "format" : "standard",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 1,
  "tags" : [ "tags", "tags" ],
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "sticky" : true,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "categories" : [ "categories", "categories" ],
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter password: (query) The password for the post if it is password protected. (optional)

     - returns: RequestBuilder<Post> 
     */
    open class func wpV2PostsIdGetWithRequestBuilder(id: String, id2: Int? = nil, context: Context_wpV2PostsIdGet? = nil, password: String? = nil) -> RequestBuilder<Post> {
        var path = "/wp/v2/posts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue, 
            "password": password
        ])
        

        let requestBuilder: RequestBuilder<Post>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_wpV2PostsIdPost: String { 
        case publish = "publish"
        case future = "future"
        case draft = "draft"
        case pending = "pending"
        case _private = "private"
    }

    /**
     * enum for parameter commentStatus
     */
    public enum CommentStatus_wpV2PostsIdPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter pingStatus
     */
    public enum PingStatus_wpV2PostsIdPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter format
     */
    public enum Format_wpV2PostsIdPost: String { 
        case standard = "standard"
        case aside = "aside"
        case chat = "chat"
        case gallery = "gallery"
        case link = "link"
        case image = "image"
        case quote = "quote"
        case status = "status"
        case video = "video"
        case audio = "audio"
    }

    /**
     * enum for parameter template
     */
    public enum Template_wpV2PostsIdPost: String { 
        case empty = ""
    }

    /**

     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter format: (form) The format for the object. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter sticky: (form) Whether or not the object should be treated as sticky. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter categories: (form) The terms assigned to the object in the category taxonomy. (optional)
     - parameter tags: (form) The terms assigned to the object in the post_tag taxonomy. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsIdPost(id: String, id2: Int? = nil, date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PostsIdPost? = nil, password: String? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PostsIdPost? = nil, pingStatus: PingStatus_wpV2PostsIdPost? = nil, format: Format_wpV2PostsIdPost? = nil, meta: String? = nil, sticky: Bool? = nil, template: Template_wpV2PostsIdPost? = nil, categories: [String]? = nil, tags: [String]? = nil, completion: @escaping ((_ data: Post?,_ error: Error?) -> Void)) {
        wpV2PostsIdPostWithRequestBuilder(id: id, id2: id2, date: date, dateGmt: dateGmt, slug: slug, status: status, password: password, title: title, content: content, author: author, excerpt: excerpt, featuredMedia: featuredMedia, commentStatus: commentStatus, pingStatus: pingStatus, format: format, meta: meta, sticky: sticky, template: template, categories: categories, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/posts/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "format" : "standard",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 1,
  "tags" : [ "tags", "tags" ],
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "sticky" : true,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "categories" : [ "categories", "categories" ],
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the object. (optional)
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter format: (form) The format for the object. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter sticky: (form) Whether or not the object should be treated as sticky. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter categories: (form) The terms assigned to the object in the category taxonomy. (optional)
     - parameter tags: (form) The terms assigned to the object in the post_tag taxonomy. (optional)

     - returns: RequestBuilder<Post> 
     */
    open class func wpV2PostsIdPostWithRequestBuilder(id: String, id2: Int? = nil, date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PostsIdPost? = nil, password: String? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PostsIdPost? = nil, pingStatus: PingStatus_wpV2PostsIdPost? = nil, format: Format_wpV2PostsIdPost? = nil, meta: String? = nil, sticky: Bool? = nil, template: Template_wpV2PostsIdPost? = nil, categories: [String]? = nil, tags: [String]? = nil) -> RequestBuilder<Post> {
        var path = "/wp/v2/posts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id2?.encodeToJSON(),
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "slug": slug,
            "status": status?.rawValue,
            "password": password,
            "title": title,
            "content": content,
            "author": author?.encodeToJSON(),
            "excerpt": excerpt,
            "featured_media": featuredMedia?.encodeToJSON(),
            "comment_status": commentStatus?.rawValue,
            "ping_status": pingStatus?.rawValue,
            "format": format?.rawValue,
            "meta": meta,
            "sticky": sticky,
            "template": template?.rawValue,
            "categories": categories,
            "tags": tags
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Post>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PostsParentRevisionsGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter parent: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsParentRevisionsGet(parent: String, parent2: Int? = nil, context: Context_wpV2PostsParentRevisionsGet? = nil, completion: @escaping ((_ data: [PostRevision]?,_ error: Error?) -> Void)) {
        wpV2PostsParentRevisionsGetWithRequestBuilder(parent: parent, parent2: parent2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/posts/{parent}/revisions
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
} ]}]
     
     - parameter parent: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<[PostRevision]> 
     */
    open class func wpV2PostsParentRevisionsGetWithRequestBuilder(parent: String, parent2: Int? = nil, context: Context_wpV2PostsParentRevisionsGet? = nil) -> RequestBuilder<[PostRevision]> {
        var path = "/wp/v2/posts/{parent}/revisions"
        path = path.replacingOccurrences(of: "{parent}", with: "\(parent)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "parent": parent2?.encodeToJSON(), 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[PostRevision]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Required to be true, as revisions do not support binning. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsParentRevisionsIdDelete(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, force: Bool? = nil, completion: @escaping ((_ data: PostRevision?,_ error: Error?) -> Void)) {
        wpV2PostsParentRevisionsIdDeleteWithRequestBuilder(parent: parent, id: id, parent2: parent2, id2: id2, force: force).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/posts/{parent}/revisions/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
}}]
     
     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter force: (query) Required to be true, as revisions do not support binning. (optional)

     - returns: RequestBuilder<PostRevision> 
     */
    open class func wpV2PostsParentRevisionsIdDeleteWithRequestBuilder(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, force: Bool? = nil) -> RequestBuilder<PostRevision> {
        var path = "/wp/v2/posts/{parent}/revisions/{id}"
        path = path.replacingOccurrences(of: "{parent}", with: "\(parent)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "parent": parent2?.encodeToJSON(), 
            "id": id2?.encodeToJSON(), 
            "force": force
        ])
        

        let requestBuilder: RequestBuilder<PostRevision>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2PostsParentRevisionsIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsParentRevisionsIdGet(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, context: Context_wpV2PostsParentRevisionsIdGet? = nil, completion: @escaping ((_ data: PostRevision?,_ error: Error?) -> Void)) {
        wpV2PostsParentRevisionsIdGetWithRequestBuilder(parent: parent, id: id, parent2: parent2, id2: id2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/posts/{parent}/revisions/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "parent" : 1,
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 0,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 6,
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  }
}}]
     
     - parameter parent: (path)  
     - parameter id: (path)  
     - parameter parent2: (query) The ID for the parent of the object. (optional)
     - parameter id2: (query) Unique identifier for the object. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<PostRevision> 
     */
    open class func wpV2PostsParentRevisionsIdGetWithRequestBuilder(parent: String, id: String, parent2: Int? = nil, id2: Int? = nil, context: Context_wpV2PostsParentRevisionsIdGet? = nil) -> RequestBuilder<PostRevision> {
        var path = "/wp/v2/posts/{parent}/revisions/{id}"
        path = path.replacingOccurrences(of: "{parent}", with: "\(parent)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "parent": parent2?.encodeToJSON(), 
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<PostRevision>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_wpV2PostsPost: String { 
        case publish = "publish"
        case future = "future"
        case draft = "draft"
        case pending = "pending"
        case _private = "private"
    }

    /**
     * enum for parameter commentStatus
     */
    public enum CommentStatus_wpV2PostsPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter pingStatus
     */
    public enum PingStatus_wpV2PostsPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter format
     */
    public enum Format_wpV2PostsPost: String { 
        case standard = "standard"
        case aside = "aside"
        case chat = "chat"
        case gallery = "gallery"
        case link = "link"
        case image = "image"
        case quote = "quote"
        case status = "status"
        case video = "video"
        case audio = "audio"
    }

    /**
     * enum for parameter template
     */
    public enum Template_wpV2PostsPost: String { 
        case empty = ""
    }

    /**

     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter format: (form) The format for the object. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter sticky: (form) Whether or not the object should be treated as sticky. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter categories: (form) The terms assigned to the object in the category taxonomy. (optional)
     - parameter tags: (form) The terms assigned to the object in the post_tag taxonomy. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2PostsPost(date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PostsPost? = nil, password: String? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PostsPost? = nil, pingStatus: PingStatus_wpV2PostsPost? = nil, format: Format_wpV2PostsPost? = nil, meta: String? = nil, sticky: Bool? = nil, template: Template_wpV2PostsPost? = nil, categories: [String]? = nil, tags: [String]? = nil, completion: @escaping ((_ data: Post?,_ error: Error?) -> Void)) {
        wpV2PostsPostWithRequestBuilder(date: date, dateGmt: dateGmt, slug: slug, status: status, password: password, title: title, content: content, author: author, excerpt: excerpt, featuredMedia: featuredMedia, commentStatus: commentStatus, pingStatus: pingStatus, format: format, meta: meta, sticky: sticky, template: template, categories: categories, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/posts
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "template" : "",
  "modified_gmt" : "2000-01-23T04:56:07.000+00:00",
  "author" : 6,
  "link" : "http://example.com/aeiou",
  "format" : "standard",
  "type" : "type",
  "title" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "comment_status" : "open",
  "content" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "featured_media" : 1,
  "tags" : [ "tags", "tags" ],
  "password" : "password",
  "ping_status" : "open",
  "meta" : "{}",
  "sticky" : true,
  "guid" : {
    "rendered" : "rendered",
    "raw" : "raw"
  },
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "categories" : [ "categories", "categories" ],
  "excerpt" : {
    "rendered" : "rendered",
    "protected" : true,
    "raw" : "raw"
  },
  "date_gmt" : "2000-01-23T04:56:07.000+00:00",
  "slug" : "slug",
  "status" : "publish"
}}]
     
     - parameter date: (form) The date the object was published, in the site&#39;s timezone. (optional)
     - parameter dateGmt: (form) The date the object was published, as GMT. (optional)
     - parameter slug: (form) An alphanumeric identifier for the object unique to its type. (optional)
     - parameter status: (form) A named status for the object. (optional)
     - parameter password: (form) A password to protect access to the content and excerpt. (optional)
     - parameter title: (form) The title for the object. (optional)
     - parameter content: (form) The content for the object. (optional)
     - parameter author: (form) The ID for the author of the object. (optional)
     - parameter excerpt: (form) The excerpt for the object. (optional)
     - parameter featuredMedia: (form) The ID of the featured media for the object. (optional)
     - parameter commentStatus: (form) Whether or not comments are open on the object. (optional)
     - parameter pingStatus: (form) Whether or not the object can be pinged. (optional)
     - parameter format: (form) The format for the object. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter sticky: (form) Whether or not the object should be treated as sticky. (optional)
     - parameter template: (form) The theme file to use to display the object. (optional)
     - parameter categories: (form) The terms assigned to the object in the category taxonomy. (optional)
     - parameter tags: (form) The terms assigned to the object in the post_tag taxonomy. (optional)

     - returns: RequestBuilder<Post> 
     */
    open class func wpV2PostsPostWithRequestBuilder(date: Date? = nil, dateGmt: Date? = nil, slug: String? = nil, status: Status_wpV2PostsPost? = nil, password: String? = nil, title: String? = nil, content: String? = nil, author: Int? = nil, excerpt: String? = nil, featuredMedia: Int? = nil, commentStatus: CommentStatus_wpV2PostsPost? = nil, pingStatus: PingStatus_wpV2PostsPost? = nil, format: Format_wpV2PostsPost? = nil, meta: String? = nil, sticky: Bool? = nil, template: Template_wpV2PostsPost? = nil, categories: [String]? = nil, tags: [String]? = nil) -> RequestBuilder<Post> {
        let path = "/wp/v2/posts"
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "date": date?.encodeToJSON(),
            "date_gmt": dateGmt?.encodeToJSON(),
            "slug": slug,
            "status": status?.rawValue,
            "password": password,
            "title": title,
            "content": content,
            "author": author?.encodeToJSON(),
            "excerpt": excerpt,
            "featured_media": featuredMedia?.encodeToJSON(),
            "comment_status": commentStatus?.rawValue,
            "ping_status": pingStatus?.rawValue,
            "format": format?.rawValue,
            "meta": meta,
            "sticky": sticky,
            "template": template?.rawValue,
            "categories": categories,
            "tags": tags
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Post>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2SettingsGet(completion: @escaping ((_ data: [Settings]?,_ error: Error?) -> Void)) {
        wpV2SettingsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/settings
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "default_ping_status" : "null",
  "start_of_week" : 0,
  "time_format" : "null",
  "posts_per_page" : 1,
  "timezone" : "null",
  "default_post_format" : "null",
  "description" : "null",
  "language" : "en_US",
  "default_comment_status" : "null",
  "title" : "null",
  "url" : "null",
  "default_category" : 6,
  "use_smilies" : true,
  "date_format" : "null",
  "email" : "null"
}, {
  "default_ping_status" : "null",
  "start_of_week" : 0,
  "time_format" : "null",
  "posts_per_page" : 1,
  "timezone" : "null",
  "default_post_format" : "null",
  "description" : "null",
  "language" : "en_US",
  "default_comment_status" : "null",
  "title" : "null",
  "url" : "null",
  "default_category" : 6,
  "use_smilies" : true,
  "date_format" : "null",
  "email" : "null"
} ]}]

     - returns: RequestBuilder<[Settings]> 
     */
    open class func wpV2SettingsGetWithRequestBuilder() -> RequestBuilder<[Settings]> {
        let path = "/wp/v2/settings"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Settings]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter defaultPingStatus
     */
    public enum DefaultPingStatus_wpV2SettingsPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter defaultCommentStatus
     */
    public enum DefaultCommentStatus_wpV2SettingsPost: String { 
        case open = "open"
        case closed = "closed"
    }

    /**

     - parameter title: (form) Site title. (optional)
     - parameter description: (form) Site tagline. (optional)
     - parameter url: (form) Site URL. (optional)
     - parameter email: (form) This address is used for admin purposes, like new user notification. (optional)
     - parameter timezone: (form) A city in the same timezone as you. (optional)
     - parameter dateFormat: (form) A date format for all date strings. (optional)
     - parameter timeFormat: (form) A time format for all time strings. (optional)
     - parameter startOfWeek: (form) A day number of the week that the week should start on. (optional)
     - parameter language: (form) WordPress locale code. (optional)
     - parameter useSmilies: (form) Convert emoticons like :-) and :-P to graphics on display. (optional)
     - parameter defaultCategory: (form) Default post category. (optional)
     - parameter defaultPostFormat: (form) Default post format. (optional)
     - parameter postsPerPage: (form) Blog pages show at most. (optional)
     - parameter defaultPingStatus: (form) Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. (optional)
     - parameter defaultCommentStatus: (form) Allow people to post comments on new articles. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2SettingsPost(title: String? = nil, description: String? = nil, url: String? = nil, email: String? = nil, timezone: String? = nil, dateFormat: String? = nil, timeFormat: String? = nil, startOfWeek: Int? = nil, language: String? = nil, useSmilies: Bool? = nil, defaultCategory: Int? = nil, defaultPostFormat: String? = nil, postsPerPage: Int? = nil, defaultPingStatus: DefaultPingStatus_wpV2SettingsPost? = nil, defaultCommentStatus: DefaultCommentStatus_wpV2SettingsPost? = nil, completion: @escaping ((_ data: Settings?,_ error: Error?) -> Void)) {
        wpV2SettingsPostWithRequestBuilder(title: title, description: description, url: url, email: email, timezone: timezone, dateFormat: dateFormat, timeFormat: timeFormat, startOfWeek: startOfWeek, language: language, useSmilies: useSmilies, defaultCategory: defaultCategory, defaultPostFormat: defaultPostFormat, postsPerPage: postsPerPage, defaultPingStatus: defaultPingStatus, defaultCommentStatus: defaultCommentStatus).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/settings
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "default_ping_status" : "null",
  "start_of_week" : 0,
  "time_format" : "null",
  "posts_per_page" : 1,
  "timezone" : "null",
  "default_post_format" : "null",
  "description" : "null",
  "language" : "en_US",
  "default_comment_status" : "null",
  "title" : "null",
  "url" : "null",
  "default_category" : 6,
  "use_smilies" : true,
  "date_format" : "null",
  "email" : "null"
}}]
     
     - parameter title: (form) Site title. (optional)
     - parameter description: (form) Site tagline. (optional)
     - parameter url: (form) Site URL. (optional)
     - parameter email: (form) This address is used for admin purposes, like new user notification. (optional)
     - parameter timezone: (form) A city in the same timezone as you. (optional)
     - parameter dateFormat: (form) A date format for all date strings. (optional)
     - parameter timeFormat: (form) A time format for all time strings. (optional)
     - parameter startOfWeek: (form) A day number of the week that the week should start on. (optional)
     - parameter language: (form) WordPress locale code. (optional)
     - parameter useSmilies: (form) Convert emoticons like :-) and :-P to graphics on display. (optional)
     - parameter defaultCategory: (form) Default post category. (optional)
     - parameter defaultPostFormat: (form) Default post format. (optional)
     - parameter postsPerPage: (form) Blog pages show at most. (optional)
     - parameter defaultPingStatus: (form) Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. (optional)
     - parameter defaultCommentStatus: (form) Allow people to post comments on new articles. (optional)

     - returns: RequestBuilder<Settings> 
     */
    open class func wpV2SettingsPostWithRequestBuilder(title: String? = nil, description: String? = nil, url: String? = nil, email: String? = nil, timezone: String? = nil, dateFormat: String? = nil, timeFormat: String? = nil, startOfWeek: Int? = nil, language: String? = nil, useSmilies: Bool? = nil, defaultCategory: Int? = nil, defaultPostFormat: String? = nil, postsPerPage: Int? = nil, defaultPingStatus: DefaultPingStatus_wpV2SettingsPost? = nil, defaultCommentStatus: DefaultCommentStatus_wpV2SettingsPost? = nil) -> RequestBuilder<Settings> {
        let path = "/wp/v2/settings"
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "title": title,
            "description": description,
            "url": url,
            "email": email,
            "timezone": timezone,
            "date_format": dateFormat,
            "time_format": timeFormat,
            "start_of_week": startOfWeek?.encodeToJSON(),
            "language": language,
            "use_smilies": useSmilies,
            "default_category": defaultCategory?.encodeToJSON(),
            "default_post_format": defaultPostFormat,
            "posts_per_page": postsPerPage?.encodeToJSON(),
            "default_ping_status": defaultPingStatus?.rawValue,
            "default_comment_status": defaultCommentStatus?.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Settings>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2StatusesGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2StatusesGet(context: Context_wpV2StatusesGet? = nil, completion: @escaping ((_ data: [Status]?,_ error: Error?) -> Void)) {
        wpV2StatusesGetWithRequestBuilder(context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/statuses
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "queryable" : true,
  "private" : true,
  "protected" : true,
  "public" : true,
  "name" : "name",
  "show_in_list" : true,
  "slug" : "slug"
}, {
  "queryable" : true,
  "private" : true,
  "protected" : true,
  "public" : true,
  "name" : "name",
  "show_in_list" : true,
  "slug" : "slug"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<[Status]> 
     */
    open class func wpV2StatusesGetWithRequestBuilder(context: Context_wpV2StatusesGet? = nil) -> RequestBuilder<[Status]> {
        let path = "/wp/v2/statuses"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[Status]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2StatusesStatusGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter status: (path)  
     - parameter status2: (query) An alphanumeric identifier for the status. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2StatusesStatusGet(status: String, status2: String? = nil, context: Context_wpV2StatusesStatusGet? = nil, completion: @escaping ((_ data: Status?,_ error: Error?) -> Void)) {
        wpV2StatusesStatusGetWithRequestBuilder(status: status, status2: status2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/statuses/{status}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "queryable" : true,
  "private" : true,
  "protected" : true,
  "public" : true,
  "name" : "name",
  "show_in_list" : true,
  "slug" : "slug"
}}]
     
     - parameter status: (path)  
     - parameter status2: (query) An alphanumeric identifier for the status. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<Status> 
     */
    open class func wpV2StatusesStatusGetWithRequestBuilder(status: String, status2: String? = nil, context: Context_wpV2StatusesStatusGet? = nil) -> RequestBuilder<Status> {
        var path = "/wp/v2/statuses/{status}"
        path = path.replacingOccurrences(of: "{status}", with: "\(status)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "status": status2, 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<Status>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2TagsGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**
     * enum for parameter order
     */
    public enum Order_wpV2TagsGet: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter orderby
     */
    public enum Orderby_wpV2TagsGet: String { 
        case id = "id"
        case include = "include"
        case name = "name"
        case slug = "slug"
        case termGroup = "term_group"
        case description = "description"
        case count = "count"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to asc)
     - parameter orderby: (query) Sort collection by term attribute. (optional, default to name)
     - parameter hideEmpty: (query) Whether to hide terms not assigned to any posts. (optional)
     - parameter post: (query) Limit result set to terms assigned to a specific post. (optional)
     - parameter slug: (query) Limit result set to terms with a specific slug. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TagsGet(context: Context_wpV2TagsGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2TagsGet? = nil, orderby: Orderby_wpV2TagsGet? = nil, hideEmpty: Bool? = nil, post: Int? = nil, slug: [String]? = nil, completion: @escaping ((_ data: [Tag]?,_ error: Error?) -> Void)) {
        wpV2TagsGetWithRequestBuilder(context: context, page: page, perPage: perPage, search: search, exclude: exclude, include: include, offset: offset, order: order, orderby: orderby, hideEmpty: hideEmpty, post: post, slug: slug).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/tags
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}, {
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter page: (query) Current page of the collection. (optional, default to 1)
     - parameter perPage: (query) Maximum number of items to be returned in result set. (optional, default to 10)
     - parameter search: (query) Limit results to those matching a string. (optional)
     - parameter exclude: (query) Ensure result set excludes specific IDs. (optional)
     - parameter include: (query) Limit result set to specific IDs. (optional)
     - parameter offset: (query) Offset the result set by a specific number of items. (optional)
     - parameter order: (query) Order sort attribute ascending or descending. (optional, default to asc)
     - parameter orderby: (query) Sort collection by term attribute. (optional, default to name)
     - parameter hideEmpty: (query) Whether to hide terms not assigned to any posts. (optional)
     - parameter post: (query) Limit result set to terms assigned to a specific post. (optional)
     - parameter slug: (query) Limit result set to terms with a specific slug. (optional)

     - returns: RequestBuilder<[Tag]> 
     */
    open class func wpV2TagsGetWithRequestBuilder(context: Context_wpV2TagsGet? = nil, page: Int? = nil, perPage: Int? = nil, search: String? = nil, exclude: [String]? = nil, include: [String]? = nil, offset: Int? = nil, order: Order_wpV2TagsGet? = nil, orderby: Orderby_wpV2TagsGet? = nil, hideEmpty: Bool? = nil, post: Int? = nil, slug: [String]? = nil) -> RequestBuilder<[Tag]> {
        let path = "/wp/v2/tags"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "search": search, 
            "exclude": exclude, 
            "include": include, 
            "offset": offset?.encodeToJSON(), 
            "order": order?.rawValue, 
            "orderby": orderby?.rawValue, 
            "hide_empty": hideEmpty, 
            "post": post?.encodeToJSON(), 
            "slug": slug
        ])
        

        let requestBuilder: RequestBuilder<[Tag]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter force: (query) Required to be true, as terms do not support binning. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TagsIdDelete(id: String, id2: Int? = nil, force: Bool? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        wpV2TagsIdDeleteWithRequestBuilder(id: id, id2: id2, force: force).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /wp/v2/tags/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter force: (query) Required to be true, as terms do not support binning. (optional)

     - returns: RequestBuilder<Tag> 
     */
    open class func wpV2TagsIdDeleteWithRequestBuilder(id: String, id2: Int? = nil, force: Bool? = nil) -> RequestBuilder<Tag> {
        var path = "/wp/v2/tags/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "force": force
        ])
        

        let requestBuilder: RequestBuilder<Tag>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2TagsIdGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TagsIdGet(id: String, id2: Int? = nil, context: Context_wpV2TagsIdGet? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        wpV2TagsIdGetWithRequestBuilder(id: id, id2: id2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/tags/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter id: (path)  
     - parameter id2: (query) Unique identifier for the term. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<Tag> 
     */
    open class func wpV2TagsIdGetWithRequestBuilder(id: String, id2: Int? = nil, context: Context_wpV2TagsIdGet? = nil) -> RequestBuilder<Tag> {
        var path = "/wp/v2/tags/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id2?.encodeToJSON(), 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<Tag>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the term. (optional)
     - parameter description: (form) HTML description of the term. (optional)
     - parameter name: (form) HTML title for the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TagsIdPost(id: String, id2: Int? = nil, description: String? = nil, name: String? = nil, slug: String? = nil, meta: String? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        wpV2TagsIdPostWithRequestBuilder(id: id, id2: id2, description: description, name: name, slug: slug, meta: meta).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/tags/{id}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter id: (path)  
     - parameter id2: (form) Unique identifier for the term. (optional)
     - parameter description: (form) HTML description of the term. (optional)
     - parameter name: (form) HTML title for the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter meta: (form) Meta fields. (optional)

     - returns: RequestBuilder<Tag> 
     */
    open class func wpV2TagsIdPostWithRequestBuilder(id: String, id2: Int? = nil, description: String? = nil, name: String? = nil, slug: String? = nil, meta: String? = nil) -> RequestBuilder<Tag> {
        var path = "/wp/v2/tags/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id2?.encodeToJSON(),
            "description": description,
            "name": name,
            "slug": slug,
            "meta": meta
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Tag>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (form) HTML title for the term. 
     - parameter description: (form) HTML description of the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter meta: (form) Meta fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TagsPost(name: String, description: String? = nil, slug: String? = nil, meta: String? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        wpV2TagsPostWithRequestBuilder(name: name, description: description, slug: slug, meta: meta).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /wp/v2/tags
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "meta" : "{}",
  "count" : 6,
  "link" : "http://example.com/aeiou",
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "taxonomy" : "category",
  "slug" : "slug"
}}]
     
     - parameter name: (form) HTML title for the term. 
     - parameter description: (form) HTML description of the term. (optional)
     - parameter slug: (form) An alphanumeric identifier for the term unique to its type. (optional)
     - parameter meta: (form) Meta fields. (optional)

     - returns: RequestBuilder<Tag> 
     */
    open class func wpV2TagsPostWithRequestBuilder(name: String, description: String? = nil, slug: String? = nil, meta: String? = nil) -> RequestBuilder<Tag> {
        let path = "/wp/v2/tags"
        let URLString = WPAPIAPI.basePath + path
        let formParams: [String:Any?] = [
            "description": description,
            "name": name,
            "slug": slug,
            "meta": meta
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Tag>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2TaxonomiesGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter type: (query) Limit results to taxonomies associated with a specific post type. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TaxonomiesGet(context: Context_wpV2TaxonomiesGet? = nil, type: String? = nil, completion: @escaping ((_ data: [Taxonomy]?,_ error: Error?) -> Void)) {
        wpV2TaxonomiesGetWithRequestBuilder(context: context, type: type).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/taxonomies
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "types" : [ "types", "types" ],
  "capabilities" : "{}",
  "show_cloud" : true,
  "hierarchical" : true,
  "name" : "name",
  "description" : "description",
  "rest_base" : "rest_base",
  "slug" : "slug",
  "labels" : "{}"
}, {
  "types" : [ "types", "types" ],
  "capabilities" : "{}",
  "show_cloud" : true,
  "hierarchical" : true,
  "name" : "name",
  "description" : "description",
  "rest_base" : "rest_base",
  "slug" : "slug",
  "labels" : "{}"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter type: (query) Limit results to taxonomies associated with a specific post type. (optional)

     - returns: RequestBuilder<[Taxonomy]> 
     */
    open class func wpV2TaxonomiesGetWithRequestBuilder(context: Context_wpV2TaxonomiesGet? = nil, type: String? = nil) -> RequestBuilder<[Taxonomy]> {
        let path = "/wp/v2/taxonomies"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue, 
            "type": type
        ])
        

        let requestBuilder: RequestBuilder<[Taxonomy]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2TaxonomiesTaxonomyGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter taxonomy: (path)  
     - parameter taxonomy2: (query) An alphanumeric identifier for the taxonomy. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TaxonomiesTaxonomyGet(taxonomy: String, taxonomy2: String? = nil, context: Context_wpV2TaxonomiesTaxonomyGet? = nil, completion: @escaping ((_ data: Taxonomy?,_ error: Error?) -> Void)) {
        wpV2TaxonomiesTaxonomyGetWithRequestBuilder(taxonomy: taxonomy, taxonomy2: taxonomy2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/taxonomies/{taxonomy}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "types" : [ "types", "types" ],
  "capabilities" : "{}",
  "show_cloud" : true,
  "hierarchical" : true,
  "name" : "name",
  "description" : "description",
  "rest_base" : "rest_base",
  "slug" : "slug",
  "labels" : "{}"
}}]
     
     - parameter taxonomy: (path)  
     - parameter taxonomy2: (query) An alphanumeric identifier for the taxonomy. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<Taxonomy> 
     */
    open class func wpV2TaxonomiesTaxonomyGetWithRequestBuilder(taxonomy: String, taxonomy2: String? = nil, context: Context_wpV2TaxonomiesTaxonomyGet? = nil) -> RequestBuilder<Taxonomy> {
        var path = "/wp/v2/taxonomies/{taxonomy}"
        path = path.replacingOccurrences(of: "{taxonomy}", with: "\(taxonomy)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "taxonomy": taxonomy2, 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<Taxonomy>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2TypesGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TypesGet(context: Context_wpV2TypesGet? = nil, completion: @escaping ((_ data: [ModelType]?,_ error: Error?) -> Void)) {
        wpV2TypesGetWithRequestBuilder(context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/types
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example=[ {
  "capabilities" : "{}",
  "taxonomies" : [ "taxonomies", "taxonomies" ],
  "hierarchical" : true,
  "name" : "name",
  "description" : "description",
  "rest_base" : "rest_base",
  "slug" : "slug",
  "labels" : "{}"
}, {
  "capabilities" : "{}",
  "taxonomies" : [ "taxonomies", "taxonomies" ],
  "hierarchical" : true,
  "name" : "name",
  "description" : "description",
  "rest_base" : "rest_base",
  "slug" : "slug",
  "labels" : "{}"
} ]}]
     
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<[ModelType]> 
     */
    open class func wpV2TypesGetWithRequestBuilder(context: Context_wpV2TypesGet? = nil) -> RequestBuilder<[ModelType]> {
        let path = "/wp/v2/types"
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[ModelType]>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter context
     */
    public enum Context_wpV2TypesTypeGet: String { 
        case view = "view"
        case embed = "embed"
        case edit = "edit"
    }

    /**

     - parameter type: (path)  
     - parameter type2: (query) An alphanumeric identifier for the post type. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wpV2TypesTypeGet(type: String, type2: String? = nil, context: Context_wpV2TypesTypeGet? = nil, completion: @escaping ((_ data: ModelType?,_ error: Error?) -> Void)) {
        wpV2TypesTypeGetWithRequestBuilder(type: type, type2: type2, context: context).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /wp/v2/types/{type}
     - API Key:
       - type: apiKey X-WP-Nonce 
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "capabilities" : "{}",
  "taxonomies" : [ "taxonomies", "taxonomies" ],
  "hierarchical" : true,
  "name" : "name",
  "description" : "description",
  "rest_base" : "rest_base",
  "slug" : "slug",
  "labels" : "{}"
}}]
     
     - parameter type: (path)  
     - parameter type2: (query) An alphanumeric identifier for the post type. (optional)
     - parameter context: (query) Scope under which the request is made; determines fields present in response. (optional, default to view)

     - returns: RequestBuilder<ModelType> 
     */
    open class func wpV2TypesTypeGetWithRequestBuilder(type: String, type2: String? = nil, context: Context_wpV2TypesTypeGet? = nil) -> RequestBuilder<ModelType> {
        var path = "/wp/v2/types/{type}"
        path = path.replacingOccurrences(of: "{type}", with: "\(type)", options: .literal, range: nil)
        let URLString = WPAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "type": type2, 
            "context": context?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<ModelType>.Type = WPAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
