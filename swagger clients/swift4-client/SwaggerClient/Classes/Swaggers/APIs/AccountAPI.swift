//
// AccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AccountAPI {
    /**

     - parameter provider: (query)  
     - parameter error: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetExternalLogin(provider: String, error: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountGetExternalLoginWithRequestBuilder(provider: provider, error: error).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/ExternalLogin
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter provider: (query)  
     - parameter error: (query)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func accountGetExternalLoginWithRequestBuilder(provider: String, error: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/Account/ExternalLogin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "provider": provider, 
            "error": error
        ])
        

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter returnUrl: (query)  
     - parameter generateState: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetExternalLogins(returnUrl: String, generateState: Bool? = nil, completion: @escaping ((_ data: [ExternalLoginViewModel]?,_ error: Error?) -> Void)) {
        accountGetExternalLoginsWithRequestBuilder(returnUrl: returnUrl, generateState: generateState).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/ExternalLogins
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example=[ {
  "State" : "State",
  "Url" : "Url",
  "Name" : "Name"
}, {
  "State" : "State",
  "Url" : "Url",
  "Name" : "Name"
} ]}, {contentType=application/xml, example=<null>
  <Name>aeiou</Name>
  <Url>aeiou</Url>
  <State>aeiou</State>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "State" : "State",
  "Url" : "Url",
  "Name" : "Name"
}, {
  "State" : "State",
  "Url" : "Url",
  "Name" : "Name"
} ]}, {contentType=application/xml, example=<null>
  <Name>aeiou</Name>
  <Url>aeiou</Url>
  <State>aeiou</State>
</null>}]
     
     - parameter returnUrl: (query)  
     - parameter generateState: (query)  (optional)

     - returns: RequestBuilder<[ExternalLoginViewModel]> 
     */
    open class func accountGetExternalLoginsWithRequestBuilder(returnUrl: String, generateState: Bool? = nil) -> RequestBuilder<[ExternalLoginViewModel]> {
        let path = "/api/Account/ExternalLogins"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "returnUrl": returnUrl, 
            "generateState": generateState
        ])
        

        let requestBuilder: RequestBuilder<[ExternalLoginViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiKey: (query)  
     - parameter emailAddress: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetForgotPassword(apiKey: String, emailAddress: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountGetForgotPasswordWithRequestBuilder(apiKey: apiKey, emailAddress: emailAddress).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/ForgotPassword
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter apiKey: (query)  
     - parameter emailAddress: (query)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountGetForgotPasswordWithRequestBuilder(apiKey: String, emailAddress: String) -> RequestBuilder<Any> {
        let path = "/api/Account/ForgotPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "apiKey": apiKey, 
            "emailAddress": emailAddress
        ])
        

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetLogout(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountGetLogoutWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/Logout
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]

     - returns: RequestBuilder<Any> 
     */
    open class func accountGetLogoutWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/api/Account/Logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter returnUrl: (query)  
     - parameter generateState: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetManageInfo(returnUrl: String, generateState: Bool? = nil, completion: @escaping ((_ data: ManageInfoViewModel?,_ error: Error?) -> Void)) {
        accountGetManageInfoWithRequestBuilder(returnUrl: returnUrl, generateState: generateState).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/ManageInfo
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "Email" : "Email",
  "LocalLoginProvider" : "LocalLoginProvider",
  "Logins" : [ {
    "ProviderKey" : "ProviderKey",
    "LoginProvider" : "LoginProvider"
  }, {
    "ProviderKey" : "ProviderKey",
    "LoginProvider" : "LoginProvider"
  } ],
  "ExternalLoginProviders" : [ {
    "State" : "State",
    "Url" : "Url",
    "Name" : "Name"
  }, {
    "State" : "State",
    "Url" : "Url",
    "Name" : "Name"
  } ]
}}, {contentType=application/xml, example=<null>
  <LocalLoginProvider>aeiou</LocalLoginProvider>
  <Email>aeiou</Email>
</null>}]
     - examples: [{contentType=application/json, example={
  "Email" : "Email",
  "LocalLoginProvider" : "LocalLoginProvider",
  "Logins" : [ {
    "ProviderKey" : "ProviderKey",
    "LoginProvider" : "LoginProvider"
  }, {
    "ProviderKey" : "ProviderKey",
    "LoginProvider" : "LoginProvider"
  } ],
  "ExternalLoginProviders" : [ {
    "State" : "State",
    "Url" : "Url",
    "Name" : "Name"
  }, {
    "State" : "State",
    "Url" : "Url",
    "Name" : "Name"
  } ]
}}, {contentType=application/xml, example=<null>
  <LocalLoginProvider>aeiou</LocalLoginProvider>
  <Email>aeiou</Email>
</null>}]
     
     - parameter returnUrl: (query)  
     - parameter generateState: (query)  (optional)

     - returns: RequestBuilder<ManageInfoViewModel> 
     */
    open class func accountGetManageInfoWithRequestBuilder(returnUrl: String, generateState: Bool? = nil) -> RequestBuilder<ManageInfoViewModel> {
        let path = "/api/Account/ManageInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "returnUrl": returnUrl, 
            "generateState": generateState
        ])
        

        let requestBuilder: RequestBuilder<ManageInfoViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetRegistrationInfo(completion: @escaping ((_ data: RegisterBindingModel?,_ error: Error?) -> Void)) {
        accountGetRegistrationInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/RegistrationInfo
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "Artist" : "Artist",
  "IAmABassPlayer" : true,
  "PasswordReminderPhrase" : "PasswordReminderPhrase",
  "DotComSiteUser" : "DotComSiteUser",
  "Email" : "Email",
  "IAmADrummer" : true,
  "AllowMuzomaContact" : true,
  "DotComSitePassword" : "DotComSitePassword",
  "IAmAComposer" : true,
  "IAmAKeyboardPlayer" : true,
  "Copyright" : "Copyright",
  "IAmASoundEngineer" : true,
  "IAmAStreetArtist" : true,
  "AppKey" : "AppKey",
  "CommunityName" : "CommunityName",
  "IAmAProducer" : true,
  "IAmASoloArtist" : true,
  "IAmAGuitarPlayer" : true,
  "Password" : "Password",
  "IAmOriginalArtist" : true,
  "IAmATeacher" : true,
  "IAmAPublisher" : true,
  "FirstName" : "FirstName",
  "RegistrationId" : "RegistrationId",
  "Publisher" : "Publisher",
  "MiddleName" : "MiddleName",
  "IAmAStudent" : true,
  "CommentsToMuzoma" : "CommentsToMuzoma",
  "ConfirmPassword" : "ConfirmPassword",
  "AppleProducerPurchasedTXReceipt" : "AppleProducerPurchasedTXReceipt",
  "EmailVerified" : true,
  "IAmAVocalist" : true,
  "IAmAWorshipArtist" : true,
  "IAmABandMember" : true,
  "Author" : "Author",
  "LastName" : "LastName",
  "IAmAMusician" : true,
  "IAmACoverArtist" : true,
  "IAmAPerformer" : true
}}, {contentType=application/xml, example=<null>
  <Email>aeiou</Email>
  <FirstName>aeiou</FirstName>
  <MiddleName>aeiou</MiddleName>
  <LastName>aeiou</LastName>
  <Password>aeiou</Password>
  <ConfirmPassword>aeiou</ConfirmPassword>
  <AllowMuzomaContact>true</AllowMuzomaContact>
  <Artist>aeiou</Artist>
  <Author>aeiou</Author>
  <Copyright>aeiou</Copyright>
  <Publisher>aeiou</Publisher>
  <AppKey>aeiou</AppKey>
  <AppleProducerPurchasedTXReceipt>aeiou</AppleProducerPurchasedTXReceipt>
  <CommunityName>aeiou</CommunityName>
  <EmailVerified>true</EmailVerified>
  <CommentsToMuzoma>aeiou</CommentsToMuzoma>
  <PasswordReminderPhrase>aeiou</PasswordReminderPhrase>
  <RegistrationId>aeiou</RegistrationId>
  <DotComSiteUser>aeiou</DotComSiteUser>
  <DotComSitePassword>aeiou</DotComSitePassword>
  <IAmAMusician>true</IAmAMusician>
  <IAmAPerformer>true</IAmAPerformer>
  <IAmAComposer>true</IAmAComposer>
  <IAmASoundEngineer>true</IAmASoundEngineer>
  <IAmAStreetArtist>true</IAmAStreetArtist>
  <IAmAProducer>true</IAmAProducer>
  <IAmAStudent>true</IAmAStudent>
  <IAmATeacher>true</IAmATeacher>
  <IAmABandMember>true</IAmABandMember>
  <IAmASoloArtist>true</IAmASoloArtist>
  <IAmAPublisher>true</IAmAPublisher>
  <IAmAWorshipArtist>true</IAmAWorshipArtist>
  <IAmACoverArtist>true</IAmACoverArtist>
  <IAmOriginalArtist>true</IAmOriginalArtist>
  <IAmAVocalist>true</IAmAVocalist>
  <IAmAGuitarPlayer>true</IAmAGuitarPlayer>
  <IAmABassPlayer>true</IAmABassPlayer>
  <IAmAKeyboardPlayer>true</IAmAKeyboardPlayer>
  <IAmADrummer>true</IAmADrummer>
</null>}]
     - examples: [{contentType=application/json, example={
  "Artist" : "Artist",
  "IAmABassPlayer" : true,
  "PasswordReminderPhrase" : "PasswordReminderPhrase",
  "DotComSiteUser" : "DotComSiteUser",
  "Email" : "Email",
  "IAmADrummer" : true,
  "AllowMuzomaContact" : true,
  "DotComSitePassword" : "DotComSitePassword",
  "IAmAComposer" : true,
  "IAmAKeyboardPlayer" : true,
  "Copyright" : "Copyright",
  "IAmASoundEngineer" : true,
  "IAmAStreetArtist" : true,
  "AppKey" : "AppKey",
  "CommunityName" : "CommunityName",
  "IAmAProducer" : true,
  "IAmASoloArtist" : true,
  "IAmAGuitarPlayer" : true,
  "Password" : "Password",
  "IAmOriginalArtist" : true,
  "IAmATeacher" : true,
  "IAmAPublisher" : true,
  "FirstName" : "FirstName",
  "RegistrationId" : "RegistrationId",
  "Publisher" : "Publisher",
  "MiddleName" : "MiddleName",
  "IAmAStudent" : true,
  "CommentsToMuzoma" : "CommentsToMuzoma",
  "ConfirmPassword" : "ConfirmPassword",
  "AppleProducerPurchasedTXReceipt" : "AppleProducerPurchasedTXReceipt",
  "EmailVerified" : true,
  "IAmAVocalist" : true,
  "IAmAWorshipArtist" : true,
  "IAmABandMember" : true,
  "Author" : "Author",
  "LastName" : "LastName",
  "IAmAMusician" : true,
  "IAmACoverArtist" : true,
  "IAmAPerformer" : true
}}, {contentType=application/xml, example=<null>
  <Email>aeiou</Email>
  <FirstName>aeiou</FirstName>
  <MiddleName>aeiou</MiddleName>
  <LastName>aeiou</LastName>
  <Password>aeiou</Password>
  <ConfirmPassword>aeiou</ConfirmPassword>
  <AllowMuzomaContact>true</AllowMuzomaContact>
  <Artist>aeiou</Artist>
  <Author>aeiou</Author>
  <Copyright>aeiou</Copyright>
  <Publisher>aeiou</Publisher>
  <AppKey>aeiou</AppKey>
  <AppleProducerPurchasedTXReceipt>aeiou</AppleProducerPurchasedTXReceipt>
  <CommunityName>aeiou</CommunityName>
  <EmailVerified>true</EmailVerified>
  <CommentsToMuzoma>aeiou</CommentsToMuzoma>
  <PasswordReminderPhrase>aeiou</PasswordReminderPhrase>
  <RegistrationId>aeiou</RegistrationId>
  <DotComSiteUser>aeiou</DotComSiteUser>
  <DotComSitePassword>aeiou</DotComSitePassword>
  <IAmAMusician>true</IAmAMusician>
  <IAmAPerformer>true</IAmAPerformer>
  <IAmAComposer>true</IAmAComposer>
  <IAmASoundEngineer>true</IAmASoundEngineer>
  <IAmAStreetArtist>true</IAmAStreetArtist>
  <IAmAProducer>true</IAmAProducer>
  <IAmAStudent>true</IAmAStudent>
  <IAmATeacher>true</IAmATeacher>
  <IAmABandMember>true</IAmABandMember>
  <IAmASoloArtist>true</IAmASoloArtist>
  <IAmAPublisher>true</IAmAPublisher>
  <IAmAWorshipArtist>true</IAmAWorshipArtist>
  <IAmACoverArtist>true</IAmACoverArtist>
  <IAmOriginalArtist>true</IAmOriginalArtist>
  <IAmAVocalist>true</IAmAVocalist>
  <IAmAGuitarPlayer>true</IAmAGuitarPlayer>
  <IAmABassPlayer>true</IAmABassPlayer>
  <IAmAKeyboardPlayer>true</IAmAKeyboardPlayer>
  <IAmADrummer>true</IAmADrummer>
</null>}]

     - returns: RequestBuilder<RegisterBindingModel> 
     */
    open class func accountGetRegistrationInfoWithRequestBuilder() -> RequestBuilder<RegisterBindingModel> {
        let path = "/api/Account/RegistrationInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RegisterBindingModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiKey: (query)  
     - parameter emailAddress: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetResendConfirmationEmail(apiKey: String, emailAddress: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountGetResendConfirmationEmailWithRequestBuilder(apiKey: apiKey, emailAddress: emailAddress).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/ResendConfirmationEmail
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter apiKey: (query)  
     - parameter emailAddress: (query)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountGetResendConfirmationEmailWithRequestBuilder(apiKey: String, emailAddress: String) -> RequestBuilder<Any> {
        let path = "/api/Account/ResendConfirmationEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "apiKey": apiKey, 
            "emailAddress": emailAddress
        ])
        

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetSayHello(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        accountGetSayHelloWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/SayHello
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example=""}, {contentType=application/xml, example=aeiou}]
     - examples: [{contentType=application/json, example=""}, {contentType=application/xml, example=aeiou}]

     - returns: RequestBuilder<String> 
     */
    open class func accountGetSayHelloWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/api/Account/SayHello"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiKey: (query)  
     - parameter transactionId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetUserDetailsByTransactionId(apiKey: String, transactionId: String, completion: @escaping ((_ data: RegisterBindingModel?,_ error: Error?) -> Void)) {
        accountGetUserDetailsByTransactionIdWithRequestBuilder(apiKey: apiKey, transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/UserDetailsByTransactionId
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "Artist" : "Artist",
  "IAmABassPlayer" : true,
  "PasswordReminderPhrase" : "PasswordReminderPhrase",
  "DotComSiteUser" : "DotComSiteUser",
  "Email" : "Email",
  "IAmADrummer" : true,
  "AllowMuzomaContact" : true,
  "DotComSitePassword" : "DotComSitePassword",
  "IAmAComposer" : true,
  "IAmAKeyboardPlayer" : true,
  "Copyright" : "Copyright",
  "IAmASoundEngineer" : true,
  "IAmAStreetArtist" : true,
  "AppKey" : "AppKey",
  "CommunityName" : "CommunityName",
  "IAmAProducer" : true,
  "IAmASoloArtist" : true,
  "IAmAGuitarPlayer" : true,
  "Password" : "Password",
  "IAmOriginalArtist" : true,
  "IAmATeacher" : true,
  "IAmAPublisher" : true,
  "FirstName" : "FirstName",
  "RegistrationId" : "RegistrationId",
  "Publisher" : "Publisher",
  "MiddleName" : "MiddleName",
  "IAmAStudent" : true,
  "CommentsToMuzoma" : "CommentsToMuzoma",
  "ConfirmPassword" : "ConfirmPassword",
  "AppleProducerPurchasedTXReceipt" : "AppleProducerPurchasedTXReceipt",
  "EmailVerified" : true,
  "IAmAVocalist" : true,
  "IAmAWorshipArtist" : true,
  "IAmABandMember" : true,
  "Author" : "Author",
  "LastName" : "LastName",
  "IAmAMusician" : true,
  "IAmACoverArtist" : true,
  "IAmAPerformer" : true
}}, {contentType=application/xml, example=<null>
  <Email>aeiou</Email>
  <FirstName>aeiou</FirstName>
  <MiddleName>aeiou</MiddleName>
  <LastName>aeiou</LastName>
  <Password>aeiou</Password>
  <ConfirmPassword>aeiou</ConfirmPassword>
  <AllowMuzomaContact>true</AllowMuzomaContact>
  <Artist>aeiou</Artist>
  <Author>aeiou</Author>
  <Copyright>aeiou</Copyright>
  <Publisher>aeiou</Publisher>
  <AppKey>aeiou</AppKey>
  <AppleProducerPurchasedTXReceipt>aeiou</AppleProducerPurchasedTXReceipt>
  <CommunityName>aeiou</CommunityName>
  <EmailVerified>true</EmailVerified>
  <CommentsToMuzoma>aeiou</CommentsToMuzoma>
  <PasswordReminderPhrase>aeiou</PasswordReminderPhrase>
  <RegistrationId>aeiou</RegistrationId>
  <DotComSiteUser>aeiou</DotComSiteUser>
  <DotComSitePassword>aeiou</DotComSitePassword>
  <IAmAMusician>true</IAmAMusician>
  <IAmAPerformer>true</IAmAPerformer>
  <IAmAComposer>true</IAmAComposer>
  <IAmASoundEngineer>true</IAmASoundEngineer>
  <IAmAStreetArtist>true</IAmAStreetArtist>
  <IAmAProducer>true</IAmAProducer>
  <IAmAStudent>true</IAmAStudent>
  <IAmATeacher>true</IAmATeacher>
  <IAmABandMember>true</IAmABandMember>
  <IAmASoloArtist>true</IAmASoloArtist>
  <IAmAPublisher>true</IAmAPublisher>
  <IAmAWorshipArtist>true</IAmAWorshipArtist>
  <IAmACoverArtist>true</IAmACoverArtist>
  <IAmOriginalArtist>true</IAmOriginalArtist>
  <IAmAVocalist>true</IAmAVocalist>
  <IAmAGuitarPlayer>true</IAmAGuitarPlayer>
  <IAmABassPlayer>true</IAmABassPlayer>
  <IAmAKeyboardPlayer>true</IAmAKeyboardPlayer>
  <IAmADrummer>true</IAmADrummer>
</null>}]
     - examples: [{contentType=application/json, example={
  "Artist" : "Artist",
  "IAmABassPlayer" : true,
  "PasswordReminderPhrase" : "PasswordReminderPhrase",
  "DotComSiteUser" : "DotComSiteUser",
  "Email" : "Email",
  "IAmADrummer" : true,
  "AllowMuzomaContact" : true,
  "DotComSitePassword" : "DotComSitePassword",
  "IAmAComposer" : true,
  "IAmAKeyboardPlayer" : true,
  "Copyright" : "Copyright",
  "IAmASoundEngineer" : true,
  "IAmAStreetArtist" : true,
  "AppKey" : "AppKey",
  "CommunityName" : "CommunityName",
  "IAmAProducer" : true,
  "IAmASoloArtist" : true,
  "IAmAGuitarPlayer" : true,
  "Password" : "Password",
  "IAmOriginalArtist" : true,
  "IAmATeacher" : true,
  "IAmAPublisher" : true,
  "FirstName" : "FirstName",
  "RegistrationId" : "RegistrationId",
  "Publisher" : "Publisher",
  "MiddleName" : "MiddleName",
  "IAmAStudent" : true,
  "CommentsToMuzoma" : "CommentsToMuzoma",
  "ConfirmPassword" : "ConfirmPassword",
  "AppleProducerPurchasedTXReceipt" : "AppleProducerPurchasedTXReceipt",
  "EmailVerified" : true,
  "IAmAVocalist" : true,
  "IAmAWorshipArtist" : true,
  "IAmABandMember" : true,
  "Author" : "Author",
  "LastName" : "LastName",
  "IAmAMusician" : true,
  "IAmACoverArtist" : true,
  "IAmAPerformer" : true
}}, {contentType=application/xml, example=<null>
  <Email>aeiou</Email>
  <FirstName>aeiou</FirstName>
  <MiddleName>aeiou</MiddleName>
  <LastName>aeiou</LastName>
  <Password>aeiou</Password>
  <ConfirmPassword>aeiou</ConfirmPassword>
  <AllowMuzomaContact>true</AllowMuzomaContact>
  <Artist>aeiou</Artist>
  <Author>aeiou</Author>
  <Copyright>aeiou</Copyright>
  <Publisher>aeiou</Publisher>
  <AppKey>aeiou</AppKey>
  <AppleProducerPurchasedTXReceipt>aeiou</AppleProducerPurchasedTXReceipt>
  <CommunityName>aeiou</CommunityName>
  <EmailVerified>true</EmailVerified>
  <CommentsToMuzoma>aeiou</CommentsToMuzoma>
  <PasswordReminderPhrase>aeiou</PasswordReminderPhrase>
  <RegistrationId>aeiou</RegistrationId>
  <DotComSiteUser>aeiou</DotComSiteUser>
  <DotComSitePassword>aeiou</DotComSitePassword>
  <IAmAMusician>true</IAmAMusician>
  <IAmAPerformer>true</IAmAPerformer>
  <IAmAComposer>true</IAmAComposer>
  <IAmASoundEngineer>true</IAmASoundEngineer>
  <IAmAStreetArtist>true</IAmAStreetArtist>
  <IAmAProducer>true</IAmAProducer>
  <IAmAStudent>true</IAmAStudent>
  <IAmATeacher>true</IAmATeacher>
  <IAmABandMember>true</IAmABandMember>
  <IAmASoloArtist>true</IAmASoloArtist>
  <IAmAPublisher>true</IAmAPublisher>
  <IAmAWorshipArtist>true</IAmAWorshipArtist>
  <IAmACoverArtist>true</IAmACoverArtist>
  <IAmOriginalArtist>true</IAmOriginalArtist>
  <IAmAVocalist>true</IAmAVocalist>
  <IAmAGuitarPlayer>true</IAmAGuitarPlayer>
  <IAmABassPlayer>true</IAmABassPlayer>
  <IAmAKeyboardPlayer>true</IAmAKeyboardPlayer>
  <IAmADrummer>true</IAmADrummer>
</null>}]
     
     - parameter apiKey: (query)  
     - parameter transactionId: (query)  

     - returns: RequestBuilder<RegisterBindingModel> 
     */
    open class func accountGetUserDetailsByTransactionIdWithRequestBuilder(apiKey: String, transactionId: String) -> RequestBuilder<RegisterBindingModel> {
        let path = "/api/Account/UserDetailsByTransactionId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "apiKey": apiKey, 
            "transactionId": transactionId
        ])
        

        let requestBuilder: RequestBuilder<RegisterBindingModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGetUserInfo(completion: @escaping ((_ data: UserInfoViewModel?,_ error: Error?) -> Void)) {
        accountGetUserInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Account/UserInfo
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example={
  "EmailVerified" : true,
  "Email" : "Email",
  "LoginProvider" : "LoginProvider",
  "HasRegistered" : true
}}, {contentType=application/xml, example=<null>
  <Email>aeiou</Email>
  <HasRegistered>true</HasRegistered>
  <EmailVerified>true</EmailVerified>
  <LoginProvider>aeiou</LoginProvider>
</null>}]
     - examples: [{contentType=application/json, example={
  "EmailVerified" : true,
  "Email" : "Email",
  "LoginProvider" : "LoginProvider",
  "HasRegistered" : true
}}, {contentType=application/xml, example=<null>
  <Email>aeiou</Email>
  <HasRegistered>true</HasRegistered>
  <EmailVerified>true</EmailVerified>
  <LoginProvider>aeiou</LoginProvider>
</null>}]

     - returns: RequestBuilder<UserInfoViewModel> 
     */
    open class func accountGetUserInfoWithRequestBuilder() -> RequestBuilder<UserInfoViewModel> {
        let path = "/api/Account/UserInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserInfoViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPostAddExternalLogin(model: AddExternalLoginBindingModel, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountPostAddExternalLoginWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/Account/AddExternalLogin
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountPostAddExternalLoginWithRequestBuilder(model: AddExternalLoginBindingModel) -> RequestBuilder<Any> {
        let path = "/api/Account/AddExternalLogin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPostChangePassword(model: ChangePasswordBindingModel, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountPostChangePasswordWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/Account/ChangePassword
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountPostChangePasswordWithRequestBuilder(model: ChangePasswordBindingModel) -> RequestBuilder<Any> {
        let path = "/api/Account/ChangePassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPostRegister(model: RegisterBindingModel, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountPostRegisterWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/Account/Register
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountPostRegisterWithRequestBuilder(model: RegisterBindingModel) -> RequestBuilder<Any> {
        let path = "/api/Account/Register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPostRegisterExternal(model: RegisterExternalBindingModel, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountPostRegisterExternalWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/Account/RegisterExternal
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountPostRegisterExternalWithRequestBuilder(model: RegisterExternalBindingModel) -> RequestBuilder<Any> {
        let path = "/api/Account/RegisterExternal"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPostRegistrationInfo(model: RegisterBindingModel, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountPostRegistrationInfoWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/Account/RegistrationInfo
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountPostRegistrationInfoWithRequestBuilder(model: RegisterBindingModel) -> RequestBuilder<Any> {
        let path = "/api/Account/RegistrationInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPostRemoveLogin(model: RemoveLoginBindingModel, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountPostRemoveLoginWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/Account/RemoveLogin
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountPostRemoveLoginWithRequestBuilder(model: RemoveLoginBindingModel) -> RequestBuilder<Any> {
        let path = "/api/Account/RemoveLogin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPostSetPassword(model: SetPasswordBindingModel, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountPostSetPasswordWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/Account/SetPassword
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     - examples: [{contentType=application/json, example="{}"}, {contentType=application/xml, example=}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<Any> 
     */
    open class func accountPostSetPasswordWithRequestBuilder(model: SetPasswordBindingModel) -> RequestBuilder<Any> {
        let path = "/api/Account/SetPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
